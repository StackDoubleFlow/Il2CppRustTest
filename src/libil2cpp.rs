#![allow(warnings)]
/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const NET_4_0: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const IL2CPP_TARGET_ARM64: u32 = 1;
pub const IL2CPP_TARGET_ARMV7: u32 = 0;
pub const IL2CPP_BINARY_SECTION_NAME: &'static [u8; 8usize] = b".il2cpp\0";
pub const IL2CPP_TARGET_ANDROID: u32 = 1;
pub const IL2CPP_PLATFORM_SUPPORTS_TIMEZONEINFO: u32 = 1;
pub const IL2CPP_TARGET_WINDOWS: u32 = 0;
pub const IL2CPP_TARGET_WINDOWS_DESKTOP: u32 = 0;
pub const IL2CPP_TARGET_WINRT: u32 = 0;
pub const IL2CPP_TARGET_XBOXONE: u32 = 0;
pub const IL2CPP_TARGET_DARWIN: u32 = 0;
pub const IL2CPP_TARGET_IOS: u32 = 0;
pub const IL2CPP_TARGET_OSX: u32 = 0;
pub const IL2CPP_TARGET_JAVASCRIPT: u32 = 0;
pub const IL2CPP_TARGET_LINUX: u32 = 0;
pub const IL2CPP_TARGET_N3DS: u32 = 0;
pub const IL2CPP_TARGET_PS4: u32 = 0;
pub const IL2CPP_TARGET_PSP2: u32 = 0;
pub const IL2CPP_TARGET_SWITCH: u32 = 0;
pub const IL2CPP_PLATFORM_SUPPORTS_SYSTEM_CERTIFICATES: u32 = 0;
pub const IL2CPP_PLATFORM_SUPPORTS_CUSTOM_SECTIONS: u32 = 0;
pub const IL2CPP_PLATFORM_SUPPORTS_CPU_INFO: u32 = 0;
pub const IL2CPP_PLATFORM_SUPPORTS_DEBUGGER_PRESENT: u32 = 0;
pub const IL2CPP_USE_STD_THREAD: u32 = 0;
pub const IL2CPP_THREADS_STD: u32 = 0;
pub const IL2CPP_SIZEOF_VOID_P: u32 = 8;
pub const IL2CPP_API_DYNAMIC_NO_DLSYM: u32 = 0;
pub const IL2CPP_ENABLE_PROFILER: u32 = 1;
pub const IL2CPP_EXCEPTION_DISABLED: u32 = 0;
pub const IL2CPP_CXX_ABI_MSVC: u32 = 0;
pub const IL2CPP_ENABLE_MONO_BUG_EMULATION: u32 = 1;
pub const IL2CPP_PAGE_SIZE: u32 = 4096;
pub const IL2CPP_DEBUG: u32 = 0;
pub const IL2CPP_DEVELOPMENT: u32 = 0;
pub const IL2CPP_THREAD_IMPL_HAS_COM_APARTMENTS: u32 = 0;
pub const IL2CPP_ENABLE_STACKTRACES: u32 = 1;
pub const IL2CPP_CAN_USE_MULTIPLE_SYMBOL_MAPS: u32 = 0;
pub const IL2CPP_GC_BOEHM: u32 = 1;
pub const IL2CPP_ENABLE_DEFERRED_GC: u32 = 0;
pub const NEED_TO_ZERO_PTRFREE: u32 = 1;
pub const IL2CPP_HAS_GC_DESCRIPTORS: u32 = 1;
pub const IL2CPP_ZERO_LEN_ARRAY: u32 = 0;
pub const IL2CPP_DIR_SEPARATOR: u8 = 47u8;
pub const IL2CPP_DISABLE_FULL_MESSAGES: u32 = 1;
pub const IL2CPP_USE_SEND_NOSIGNAL: u32 = 0;
pub const IL2CPP_SIZEOF_STRUCT_WITH_NO_INSTANCE_FIELDS: u32 = 1;
pub const IL2CPP_VALIDATE_FIELD_LAYOUT: u32 = 0;
pub const IL2CPP_LITTLE_ENDIAN: u32 = 1;
pub const IL2CPP_BIG_ENDIAN: u32 = 2;
pub const IL2CPP_BYTE_ORDER: u32 = 1;
pub const IL2CPP_HAS_DELETED_FUNCTIONS: u32 = 0;
pub const IL2CPP_POINTER_SPARE_BITS: u32 = 3;
pub const MAXIMUM_NESTED_GENERICS_EXCEPTION_MESSAGE : & 'static [ u8 ; 176usize ] = b"IL2CPP encountered a managed type which it cannot convert ahead-of-time. The type uses generic or array types which are nested beyond the maximum depth which can be converted.\0" ;
pub const IL2CPP_USE_GENERIC_CPU_INFO: u32 = 1;
pub const PUBLIC_KEY_BYTE_LENGTH: u32 = 8;
pub const FIELD_ATTRIBUTE_FIELD_ACCESS_MASK: u32 = 7;
pub const FIELD_ATTRIBUTE_COMPILER_CONTROLLED: u32 = 0;
pub const FIELD_ATTRIBUTE_PRIVATE: u32 = 1;
pub const FIELD_ATTRIBUTE_FAM_AND_ASSEM: u32 = 2;
pub const FIELD_ATTRIBUTE_ASSEMBLY: u32 = 3;
pub const FIELD_ATTRIBUTE_FAMILY: u32 = 4;
pub const FIELD_ATTRIBUTE_FAM_OR_ASSEM: u32 = 5;
pub const FIELD_ATTRIBUTE_PUBLIC: u32 = 6;
pub const FIELD_ATTRIBUTE_STATIC: u32 = 16;
pub const FIELD_ATTRIBUTE_INIT_ONLY: u32 = 32;
pub const FIELD_ATTRIBUTE_LITERAL: u32 = 64;
pub const FIELD_ATTRIBUTE_NOT_SERIALIZED: u32 = 128;
pub const FIELD_ATTRIBUTE_SPECIAL_NAME: u32 = 512;
pub const FIELD_ATTRIBUTE_PINVOKE_IMPL: u32 = 8192;
pub const FIELD_ATTRIBUTE_RESERVED_MASK: u32 = 38144;
pub const FIELD_ATTRIBUTE_RT_SPECIAL_NAME: u32 = 1024;
pub const FIELD_ATTRIBUTE_HAS_FIELD_MARSHAL: u32 = 4096;
pub const FIELD_ATTRIBUTE_HAS_DEFAULT: u32 = 32768;
pub const FIELD_ATTRIBUTE_HAS_FIELD_RVA: u32 = 256;
pub const METHOD_IMPL_ATTRIBUTE_CODE_TYPE_MASK: u32 = 3;
pub const METHOD_IMPL_ATTRIBUTE_IL: u32 = 0;
pub const METHOD_IMPL_ATTRIBUTE_NATIVE: u32 = 1;
pub const METHOD_IMPL_ATTRIBUTE_OPTIL: u32 = 2;
pub const METHOD_IMPL_ATTRIBUTE_RUNTIME: u32 = 3;
pub const METHOD_IMPL_ATTRIBUTE_MANAGED_MASK: u32 = 4;
pub const METHOD_IMPL_ATTRIBUTE_UNMANAGED: u32 = 4;
pub const METHOD_IMPL_ATTRIBUTE_MANAGED: u32 = 0;
pub const METHOD_IMPL_ATTRIBUTE_FORWARD_REF: u32 = 16;
pub const METHOD_IMPL_ATTRIBUTE_PRESERVE_SIG: u32 = 128;
pub const METHOD_IMPL_ATTRIBUTE_INTERNAL_CALL: u32 = 4096;
pub const METHOD_IMPL_ATTRIBUTE_SYNCHRONIZED: u32 = 32;
pub const METHOD_IMPL_ATTRIBUTE_NOINLINING: u32 = 8;
pub const METHOD_IMPL_ATTRIBUTE_MAX_METHOD_IMPL_VAL: u32 = 65535;
pub const METHOD_ATTRIBUTE_MEMBER_ACCESS_MASK: u32 = 7;
pub const METHOD_ATTRIBUTE_COMPILER_CONTROLLED: u32 = 0;
pub const METHOD_ATTRIBUTE_PRIVATE: u32 = 1;
pub const METHOD_ATTRIBUTE_FAM_AND_ASSEM: u32 = 2;
pub const METHOD_ATTRIBUTE_ASSEM: u32 = 3;
pub const METHOD_ATTRIBUTE_FAMILY: u32 = 4;
pub const METHOD_ATTRIBUTE_FAM_OR_ASSEM: u32 = 5;
pub const METHOD_ATTRIBUTE_PUBLIC: u32 = 6;
pub const METHOD_ATTRIBUTE_STATIC: u32 = 16;
pub const METHOD_ATTRIBUTE_FINAL: u32 = 32;
pub const METHOD_ATTRIBUTE_VIRTUAL: u32 = 64;
pub const METHOD_ATTRIBUTE_HIDE_BY_SIG: u32 = 128;
pub const METHOD_ATTRIBUTE_VTABLE_LAYOUT_MASK: u32 = 256;
pub const METHOD_ATTRIBUTE_REUSE_SLOT: u32 = 0;
pub const METHOD_ATTRIBUTE_NEW_SLOT: u32 = 256;
pub const METHOD_ATTRIBUTE_STRICT: u32 = 512;
pub const METHOD_ATTRIBUTE_ABSTRACT: u32 = 1024;
pub const METHOD_ATTRIBUTE_SPECIAL_NAME: u32 = 2048;
pub const METHOD_ATTRIBUTE_PINVOKE_IMPL: u32 = 8192;
pub const METHOD_ATTRIBUTE_UNMANAGED_EXPORT: u32 = 8;
pub const METHOD_ATTRIBUTE_RESERVED_MASK: u32 = 53248;
pub const METHOD_ATTRIBUTE_RT_SPECIAL_NAME: u32 = 4096;
pub const METHOD_ATTRIBUTE_HAS_SECURITY: u32 = 16384;
pub const METHOD_ATTRIBUTE_REQUIRE_SEC_OBJECT: u32 = 32768;
pub const TYPE_ATTRIBUTE_VISIBILITY_MASK: u32 = 7;
pub const TYPE_ATTRIBUTE_NOT_PUBLIC: u32 = 0;
pub const TYPE_ATTRIBUTE_PUBLIC: u32 = 1;
pub const TYPE_ATTRIBUTE_NESTED_PUBLIC: u32 = 2;
pub const TYPE_ATTRIBUTE_NESTED_PRIVATE: u32 = 3;
pub const TYPE_ATTRIBUTE_NESTED_FAMILY: u32 = 4;
pub const TYPE_ATTRIBUTE_NESTED_ASSEMBLY: u32 = 5;
pub const TYPE_ATTRIBUTE_NESTED_FAM_AND_ASSEM: u32 = 6;
pub const TYPE_ATTRIBUTE_NESTED_FAM_OR_ASSEM: u32 = 7;
pub const TYPE_ATTRIBUTE_LAYOUT_MASK: u32 = 24;
pub const TYPE_ATTRIBUTE_AUTO_LAYOUT: u32 = 0;
pub const TYPE_ATTRIBUTE_SEQUENTIAL_LAYOUT: u32 = 8;
pub const TYPE_ATTRIBUTE_EXPLICIT_LAYOUT: u32 = 16;
pub const TYPE_ATTRIBUTE_CLASS_SEMANTIC_MASK: u32 = 32;
pub const TYPE_ATTRIBUTE_CLASS: u32 = 0;
pub const TYPE_ATTRIBUTE_INTERFACE: u32 = 32;
pub const TYPE_ATTRIBUTE_ABSTRACT: u32 = 128;
pub const TYPE_ATTRIBUTE_SEALED: u32 = 256;
pub const TYPE_ATTRIBUTE_SPECIAL_NAME: u32 = 1024;
pub const TYPE_ATTRIBUTE_IMPORT: u32 = 4096;
pub const TYPE_ATTRIBUTE_SERIALIZABLE: u32 = 8192;
pub const TYPE_ATTRIBUTE_STRING_FORMAT_MASK: u32 = 196608;
pub const TYPE_ATTRIBUTE_ANSI_CLASS: u32 = 0;
pub const TYPE_ATTRIBUTE_UNICODE_CLASS: u32 = 65536;
pub const TYPE_ATTRIBUTE_AUTO_CLASS: u32 = 131072;
pub const TYPE_ATTRIBUTE_BEFORE_FIELD_INIT: u32 = 1048576;
pub const TYPE_ATTRIBUTE_FORWARDER: u32 = 2097152;
pub const TYPE_ATTRIBUTE_RESERVED_MASK: u32 = 264192;
pub const TYPE_ATTRIBUTE_RT_SPECIAL_NAME: u32 = 2048;
pub const TYPE_ATTRIBUTE_HAS_SECURITY: u32 = 262144;
pub const PARAM_ATTRIBUTE_IN: u32 = 1;
pub const PARAM_ATTRIBUTE_OUT: u32 = 2;
pub const PARAM_ATTRIBUTE_OPTIONAL: u32 = 16;
pub const PARAM_ATTRIBUTE_RESERVED_MASK: u32 = 61440;
pub const PARAM_ATTRIBUTE_HAS_DEFAULT: u32 = 4096;
pub const PARAM_ATTRIBUTE_HAS_FIELD_MARSHAL: u32 = 8192;
pub const PARAM_ATTRIBUTE_UNUSED: u32 = 53216;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_NON_VARIANT: u32 = 0;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_COVARIANT: u32 = 1;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_CONTRAVARIANT: u32 = 2;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_VARIANCE_MASK: u32 = 3;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_REFERENCE_TYPE_CONSTRAINT: u32 = 4;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_NOT_NULLABLE_VALUE_TYPE_CONSTRAINT: u32 = 8;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_DEFAULT_CONSTRUCTOR_CONSTRAINT: u32 = 16;
pub const IL2CPP_GENERIC_PARAMETER_ATTRIBUTE_SPECIAL_CONSTRAINT_MASK: u32 = 28;
pub const ASSEMBLYREF_FULL_PUBLIC_KEY_FLAG: u32 = 1;
pub const ASSEMBLYREF_RETARGETABLE_FLAG: u32 = 256;
pub const ASSEMBLYREF_ENABLEJITCOMPILE_TRACKING_FLAG: u32 = 32768;
pub const ASSEMBLYREF_DISABLEJITCOMPILE_OPTIMIZER_FLAG: u32 = 16384;
pub type va_list = *mut ::std::os::raw::c_char;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
pub type fpos_t = ::std::os::raw::c_longlong;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppProfiler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppManagedMemorySnapshot {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCustomAttrInfo {
    _unused: [u8; 0],
}
pub const Il2CppProfileFlags_IL2CPP_PROFILE_NONE: Il2CppProfileFlags = 0;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_APPDOMAIN_EVENTS: Il2CppProfileFlags = 1;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_ASSEMBLY_EVENTS: Il2CppProfileFlags = 2;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_MODULE_EVENTS: Il2CppProfileFlags = 4;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_CLASS_EVENTS: Il2CppProfileFlags = 8;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_JIT_COMPILATION: Il2CppProfileFlags = 16;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_INLINING: Il2CppProfileFlags = 32;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_EXCEPTIONS: Il2CppProfileFlags = 64;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_ALLOCATIONS: Il2CppProfileFlags = 128;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_GC: Il2CppProfileFlags = 256;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_THREADS: Il2CppProfileFlags = 512;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_REMOTING: Il2CppProfileFlags = 1024;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_TRANSITIONS: Il2CppProfileFlags = 2048;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_ENTER_LEAVE: Il2CppProfileFlags = 4096;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_COVERAGE: Il2CppProfileFlags = 8192;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_INS_COVERAGE: Il2CppProfileFlags = 16384;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_STATISTICAL: Il2CppProfileFlags = 32768;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_METHOD_EVENTS: Il2CppProfileFlags = 65536;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_MONITOR_EVENTS: Il2CppProfileFlags = 131072;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_IOMAP_EVENTS: Il2CppProfileFlags = 262144;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_GC_MOVES: Il2CppProfileFlags = 524288;
pub const Il2CppProfileFlags_IL2CPP_PROFILE_FILEIO: Il2CppProfileFlags = 1048576;
pub type Il2CppProfileFlags = i32;
pub const Il2CppProfileFileIOKind_IL2CPP_PROFILE_FILEIO_WRITE: Il2CppProfileFileIOKind = 0;
pub const Il2CppProfileFileIOKind_IL2CPP_PROFILE_FILEIO_READ: Il2CppProfileFileIOKind = 1;
pub type Il2CppProfileFileIOKind = i32;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_START: Il2CppGCEvent = 0;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_MARK_START: Il2CppGCEvent = 1;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_MARK_END: Il2CppGCEvent = 2;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_RECLAIM_START: Il2CppGCEvent = 3;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_RECLAIM_END: Il2CppGCEvent = 4;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_END: Il2CppGCEvent = 5;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_PRE_STOP_WORLD: Il2CppGCEvent = 6;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_POST_STOP_WORLD: Il2CppGCEvent = 7;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_PRE_START_WORLD: Il2CppGCEvent = 8;
pub const Il2CppGCEvent_IL2CPP_GC_EVENT_POST_START_WORLD: Il2CppGCEvent = 9;
pub type Il2CppGCEvent = i32;
pub const Il2CppStat_IL2CPP_STAT_NEW_OBJECT_COUNT: Il2CppStat = 0;
pub const Il2CppStat_IL2CPP_STAT_INITIALIZED_CLASS_COUNT: Il2CppStat = 1;
pub const Il2CppStat_IL2CPP_STAT_METHOD_COUNT: Il2CppStat = 2;
pub const Il2CppStat_IL2CPP_STAT_CLASS_STATIC_DATA_SIZE: Il2CppStat = 3;
pub const Il2CppStat_IL2CPP_STAT_GENERIC_INSTANCE_COUNT: Il2CppStat = 4;
pub const Il2CppStat_IL2CPP_STAT_GENERIC_CLASS_COUNT: Il2CppStat = 5;
pub const Il2CppStat_IL2CPP_STAT_INFLATED_METHOD_COUNT: Il2CppStat = 6;
pub const Il2CppStat_IL2CPP_STAT_INFLATED_TYPE_COUNT: Il2CppStat = 7;
pub type Il2CppStat = i32;
pub const Il2CppRuntimeUnhandledExceptionPolicy_IL2CPP_UNHANDLED_POLICY_LEGACY:
    Il2CppRuntimeUnhandledExceptionPolicy = 0;
pub const Il2CppRuntimeUnhandledExceptionPolicy_IL2CPP_UNHANDLED_POLICY_CURRENT:
    Il2CppRuntimeUnhandledExceptionPolicy = 1;
pub type Il2CppRuntimeUnhandledExceptionPolicy = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppStackFrameInfo {
    pub method: *const MethodInfo,
}
#[test]
fn bindgen_test_layout_Il2CppStackFrameInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppStackFrameInfo>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppStackFrameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStackFrameInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStackFrameInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrameInfo>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrameInfo),
            "::",
            stringify!(method)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMemoryCallbacks {
    pub malloc_func:
        ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>,
    pub aligned_malloc_func: ::std::option::Option<
        unsafe extern "C" fn(size: usize, alignment: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub free_func: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub aligned_free_func:
        ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub calloc_func: ::std::option::Option<
        unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub realloc_func: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub aligned_realloc_func: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_Il2CppMemoryCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMemoryCallbacks>(),
        56usize,
        concat!("Size of: ", stringify!(Il2CppMemoryCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMemoryCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMemoryCallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMemoryCallbacks>())).malloc_func as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(malloc_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMemoryCallbacks>())).aligned_malloc_func as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(aligned_malloc_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMemoryCallbacks>())).free_func as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(free_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMemoryCallbacks>())).aligned_free_func as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(aligned_free_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMemoryCallbacks>())).calloc_func as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(calloc_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMemoryCallbacks>())).realloc_func as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(realloc_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMemoryCallbacks>())).aligned_realloc_func as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMemoryCallbacks),
            "::",
            stringify!(aligned_realloc_func)
        )
    );
}
pub type Il2CppChar = u16;
pub type Il2CppNativeChar = ::std::os::raw::c_char;
pub type il2cpp_register_object_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arr: *mut *mut Il2CppObject,
        size: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type il2cpp_WorldChangedCallback = ::std::option::Option<unsafe extern "C" fn()>;
pub type Il2CppFrameWalkFunc = ::std::option::Option<
    unsafe extern "C" fn(info: *const Il2CppStackFrameInfo, user_data: *mut ::std::os::raw::c_void),
>;
pub type Il2CppProfileFunc = ::std::option::Option<unsafe extern "C" fn(prof: *mut Il2CppProfiler)>;
pub type Il2CppProfileMethodFunc = ::std::option::Option<
    unsafe extern "C" fn(prof: *mut Il2CppProfiler, method: *const MethodInfo),
>;
pub type Il2CppProfileAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        prof: *mut Il2CppProfiler,
        obj: *mut Il2CppObject,
        klass: *mut Il2CppClass,
    ),
>;
pub type Il2CppProfileGCFunc = ::std::option::Option<
    unsafe extern "C" fn(
        prof: *mut Il2CppProfiler,
        event: Il2CppGCEvent,
        generation: ::std::os::raw::c_int,
    ),
>;
pub type Il2CppProfileGCResizeFunc =
    ::std::option::Option<unsafe extern "C" fn(prof: *mut Il2CppProfiler, new_size: i64)>;
pub type Il2CppProfileFileIOFunc = ::std::option::Option<
    unsafe extern "C" fn(
        prof: *mut Il2CppProfiler,
        kind: Il2CppProfileFileIOKind,
        count: ::std::os::raw::c_int,
    ),
>;
pub type Il2CppProfileThreadFunc = ::std::option::Option<
    unsafe extern "C" fn(prof: *mut Il2CppProfiler, tid: ::std::os::raw::c_ulong),
>;
pub type Il2CppSetFindPlugInCallback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const Il2CppNativeChar) -> *const Il2CppNativeChar,
>;
pub type Il2CppLogCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>;
pub type Il2CppMethodPointer = ::std::option::Option<unsafe extern "C" fn()>;
pub type il2cpp_array_size_t = usize;
pub type Il2CppMethodSlot = u32;
pub const kInvalidIl2CppMethodSlot: u32 = 65535;
pub const kIl2CppInt32Min: i32 = -2147483648;
pub const kIl2CppInt32Max: i32 = 2147483647;
pub const kIl2CppUInt32Max: u32 = 4294967295;
pub const kIl2CppInt64Min: i64 = -9223372036854775808;
pub const kIl2CppInt64Max: i64 = 9223372036854775807;
extern "C" {
    pub static kIl2CppUInt64Max: u64;
}
pub const kIl2CppIntPtrMin: isize = -9223372036854775808;
pub const kIl2CppIntPtrMax: isize = 9223372036854775807;
extern "C" {
    pub static kIl2CppUIntPtrMax: usize;
}
pub const ipv6AddressSize: ::std::os::raw::c_int = 16;
pub type il2cpp_hresult_t = i32;
extern "C" {
    pub static mut kIl2CppNewLine: [Il2CppChar; 2usize];
}
pub const Il2CppTypeEnum_IL2CPP_TYPE_END: Il2CppTypeEnum = 0;
pub const Il2CppTypeEnum_IL2CPP_TYPE_VOID: Il2CppTypeEnum = 1;
pub const Il2CppTypeEnum_IL2CPP_TYPE_BOOLEAN: Il2CppTypeEnum = 2;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CHAR: Il2CppTypeEnum = 3;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I1: Il2CppTypeEnum = 4;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U1: Il2CppTypeEnum = 5;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I2: Il2CppTypeEnum = 6;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U2: Il2CppTypeEnum = 7;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I4: Il2CppTypeEnum = 8;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U4: Il2CppTypeEnum = 9;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I8: Il2CppTypeEnum = 10;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U8: Il2CppTypeEnum = 11;
pub const Il2CppTypeEnum_IL2CPP_TYPE_R4: Il2CppTypeEnum = 12;
pub const Il2CppTypeEnum_IL2CPP_TYPE_R8: Il2CppTypeEnum = 13;
pub const Il2CppTypeEnum_IL2CPP_TYPE_STRING: Il2CppTypeEnum = 14;
pub const Il2CppTypeEnum_IL2CPP_TYPE_PTR: Il2CppTypeEnum = 15;
pub const Il2CppTypeEnum_IL2CPP_TYPE_BYREF: Il2CppTypeEnum = 16;
pub const Il2CppTypeEnum_IL2CPP_TYPE_VALUETYPE: Il2CppTypeEnum = 17;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CLASS: Il2CppTypeEnum = 18;
pub const Il2CppTypeEnum_IL2CPP_TYPE_VAR: Il2CppTypeEnum = 19;
pub const Il2CppTypeEnum_IL2CPP_TYPE_ARRAY: Il2CppTypeEnum = 20;
pub const Il2CppTypeEnum_IL2CPP_TYPE_GENERICINST: Il2CppTypeEnum = 21;
pub const Il2CppTypeEnum_IL2CPP_TYPE_TYPEDBYREF: Il2CppTypeEnum = 22;
pub const Il2CppTypeEnum_IL2CPP_TYPE_I: Il2CppTypeEnum = 24;
pub const Il2CppTypeEnum_IL2CPP_TYPE_U: Il2CppTypeEnum = 25;
pub const Il2CppTypeEnum_IL2CPP_TYPE_FNPTR: Il2CppTypeEnum = 27;
pub const Il2CppTypeEnum_IL2CPP_TYPE_OBJECT: Il2CppTypeEnum = 28;
pub const Il2CppTypeEnum_IL2CPP_TYPE_SZARRAY: Il2CppTypeEnum = 29;
pub const Il2CppTypeEnum_IL2CPP_TYPE_MVAR: Il2CppTypeEnum = 30;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CMOD_REQD: Il2CppTypeEnum = 31;
pub const Il2CppTypeEnum_IL2CPP_TYPE_CMOD_OPT: Il2CppTypeEnum = 32;
pub const Il2CppTypeEnum_IL2CPP_TYPE_INTERNAL: Il2CppTypeEnum = 33;
pub const Il2CppTypeEnum_IL2CPP_TYPE_MODIFIER: Il2CppTypeEnum = 64;
pub const Il2CppTypeEnum_IL2CPP_TYPE_SENTINEL: Il2CppTypeEnum = 65;
pub const Il2CppTypeEnum_IL2CPP_TYPE_PINNED: Il2CppTypeEnum = 69;
pub const Il2CppTypeEnum_IL2CPP_TYPE_ENUM: Il2CppTypeEnum = 85;
pub type Il2CppTypeEnum = i32;
pub type TypeIndex = i32;
pub type TypeDefinitionIndex = i32;
pub type FieldIndex = i32;
pub type DefaultValueIndex = i32;
pub type DefaultValueDataIndex = i32;
pub type CustomAttributeIndex = i32;
pub type ParameterIndex = i32;
pub type MethodIndex = i32;
pub type GenericMethodIndex = i32;
pub type PropertyIndex = i32;
pub type EventIndex = i32;
pub type GenericContainerIndex = i32;
pub type GenericParameterIndex = i32;
pub type GenericParameterConstraintIndex = i16;
pub type NestedTypeIndex = i32;
pub type InterfacesIndex = i32;
pub type VTableIndex = i32;
pub type InterfaceOffsetIndex = i32;
pub type RGCTXIndex = i32;
pub type StringIndex = i32;
pub type StringLiteralIndex = i32;
pub type GenericInstIndex = i32;
pub type ImageIndex = i32;
pub type AssemblyIndex = i32;
pub type InteropDataIndex = i32;
pub const kTypeIndexInvalid: TypeIndex = -1;
pub const kTypeDefinitionIndexInvalid: TypeDefinitionIndex = -1;
pub const kDefaultValueIndexNull: DefaultValueDataIndex = -1;
pub const kCustomAttributeIndexInvalid: CustomAttributeIndex = -1;
pub const kEventIndexInvalid: EventIndex = -1;
pub const kFieldIndexInvalid: FieldIndex = -1;
pub const kMethodIndexInvalid: MethodIndex = -1;
pub const kPropertyIndexInvalid: PropertyIndex = -1;
pub const kGenericContainerIndexInvalid: GenericContainerIndex = -1;
pub const kGenericParameterIndexInvalid: GenericParameterIndex = -1;
pub const kRGCTXIndexInvalid: RGCTXIndex = -1;
pub const kStringLiteralIndexInvalid: StringLiteralIndex = -1;
pub const kInteropDataIndexInvalid: InteropDataIndex = -1;
pub type EncodedMethodIndex = u32;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageInvalid: Il2CppMetadataUsage = 0;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageTypeInfo: Il2CppMetadataUsage = 1;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageIl2CppType: Il2CppMetadataUsage = 2;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageMethodDef: Il2CppMetadataUsage = 3;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageFieldInfo: Il2CppMetadataUsage = 4;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageStringLiteral: Il2CppMetadataUsage = 5;
pub const Il2CppMetadataUsage_kIl2CppMetadataUsageMethodRef: Il2CppMetadataUsage = 6;
pub type Il2CppMetadataUsage = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypeDefinitionMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppRGCTXDefinitionData {
    pub rgctxDataDummy: i32,
    pub methodIndex: MethodIndex,
    pub typeIndex: TypeIndex,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_Il2CppRGCTXDefinitionData() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppRGCTXDefinitionData>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppRGCTXDefinitionData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRGCTXDefinitionData>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppRGCTXDefinitionData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRGCTXDefinitionData>())).rgctxDataDummy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinitionData),
            "::",
            stringify!(rgctxDataDummy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRGCTXDefinitionData>())).methodIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinitionData),
            "::",
            stringify!(methodIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRGCTXDefinitionData>())).typeIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinitionData),
            "::",
            stringify!(typeIndex)
        )
    );
}
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_INVALID: Il2CppRGCTXDataType = 0;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_TYPE: Il2CppRGCTXDataType = 1;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_CLASS: Il2CppRGCTXDataType = 2;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_METHOD: Il2CppRGCTXDataType = 3;
pub const Il2CppRGCTXDataType_IL2CPP_RGCTX_DATA_ARRAY: Il2CppRGCTXDataType = 4;
pub type Il2CppRGCTXDataType = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppRGCTXDefinition {
    pub type_: Il2CppRGCTXDataType,
    pub data: Il2CppRGCTXDefinitionData,
}
#[test]
fn bindgen_test_layout_Il2CppRGCTXDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppRGCTXDefinition>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppRGCTXDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRGCTXDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppRGCTXDefinition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRGCTXDefinition>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRGCTXDefinition>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXDefinition),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppInterfaceOffsetPair {
    pub interfaceTypeIndex: TypeIndex,
    pub offset: i32,
}
#[test]
fn bindgen_test_layout_Il2CppInterfaceOffsetPair() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppInterfaceOffsetPair>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppInterfaceOffsetPair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppInterfaceOffsetPair>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppInterfaceOffsetPair))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInterfaceOffsetPair>())).interfaceTypeIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInterfaceOffsetPair),
            "::",
            stringify!(interfaceTypeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInterfaceOffsetPair>())).offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInterfaceOffsetPair),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypeDefinition {
    pub nameIndex: StringIndex,
    pub namespaceIndex: StringIndex,
    pub byvalTypeIndex: TypeIndex,
    pub byrefTypeIndex: TypeIndex,
    pub declaringTypeIndex: TypeIndex,
    pub parentIndex: TypeIndex,
    pub elementTypeIndex: TypeIndex,
    pub rgctxStartIndex: RGCTXIndex,
    pub rgctxCount: i32,
    pub genericContainerIndex: GenericContainerIndex,
    pub flags: u32,
    pub fieldStart: FieldIndex,
    pub methodStart: MethodIndex,
    pub eventStart: EventIndex,
    pub propertyStart: PropertyIndex,
    pub nestedTypesStart: NestedTypeIndex,
    pub interfacesStart: InterfacesIndex,
    pub vtableStart: VTableIndex,
    pub interfaceOffsetsStart: InterfacesIndex,
    pub method_count: u16,
    pub property_count: u16,
    pub field_count: u16,
    pub event_count: u16,
    pub nested_type_count: u16,
    pub vtable_count: u16,
    pub interfaces_count: u16,
    pub interface_offsets_count: u16,
    pub bitfield: u32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppTypeDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypeDefinition>(),
        100usize,
        concat!("Size of: ", stringify!(Il2CppTypeDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypeDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppTypeDefinition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypeDefinition>())).nameIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).namespaceIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(namespaceIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).byvalTypeIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(byvalTypeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).byrefTypeIndex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(byrefTypeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).declaringTypeIndex as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(declaringTypeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).parentIndex as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(parentIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).elementTypeIndex as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(elementTypeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).rgctxStartIndex as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(rgctxStartIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypeDefinition>())).rgctxCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(rgctxCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).genericContainerIndex as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(genericContainerIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypeDefinition>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypeDefinition>())).fieldStart as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(fieldStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).methodStart as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(methodStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypeDefinition>())).eventStart as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(eventStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).propertyStart as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(propertyStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).nestedTypesStart as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(nestedTypesStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).interfacesStart as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interfacesStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).vtableStart as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(vtableStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).interfaceOffsetsStart as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interfaceOffsetsStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).method_count as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(method_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).property_count as *const _ as usize
        },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(property_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).field_count as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).event_count as *const _ as usize
        },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(event_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).nested_type_count as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(nested_type_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).vtable_count as *const _ as usize
        },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(vtable_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).interfaces_count as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interfaces_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinition>())).interface_offsets_count as *const _
                as usize
        },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(interface_offsets_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypeDefinition>())).bitfield as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(bitfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypeDefinition>())).token as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldDefinition {
    pub nameIndex: StringIndex,
    pub typeIndex: TypeIndex,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppFieldDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldDefinition>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppFieldDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldDefinition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFieldDefinition>())).nameIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFieldDefinition>())).typeIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefinition),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFieldDefinition>())).token as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldDefaultValue {
    pub fieldIndex: FieldIndex,
    pub typeIndex: TypeIndex,
    pub dataIndex: DefaultValueDataIndex,
}
#[test]
fn bindgen_test_layout_Il2CppFieldDefaultValue() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldDefaultValue>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppFieldDefaultValue))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldDefaultValue>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldDefaultValue))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppFieldDefaultValue>())).fieldIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefaultValue),
            "::",
            stringify!(fieldIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppFieldDefaultValue>())).typeIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefaultValue),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppFieldDefaultValue>())).dataIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldDefaultValue),
            "::",
            stringify!(dataIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldMarshaledSize {
    pub fieldIndex: FieldIndex,
    pub typeIndex: TypeIndex,
    pub size: i32,
}
#[test]
fn bindgen_test_layout_Il2CppFieldMarshaledSize() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldMarshaledSize>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppFieldMarshaledSize))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldMarshaledSize>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldMarshaledSize))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppFieldMarshaledSize>())).fieldIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldMarshaledSize),
            "::",
            stringify!(fieldIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppFieldMarshaledSize>())).typeIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldMarshaledSize),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFieldMarshaledSize>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldMarshaledSize),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFieldRef {
    pub typeIndex: TypeIndex,
    pub fieldIndex: FieldIndex,
}
#[test]
fn bindgen_test_layout_Il2CppFieldRef() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppFieldRef>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppFieldRef))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFieldRef>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFieldRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFieldRef>())).typeIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldRef),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFieldRef>())).fieldIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFieldRef),
            "::",
            stringify!(fieldIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppParameterDefinition {
    pub nameIndex: StringIndex,
    pub token: u32,
    pub typeIndex: TypeIndex,
}
#[test]
fn bindgen_test_layout_Il2CppParameterDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppParameterDefinition>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppParameterDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppParameterDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppParameterDefinition))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppParameterDefinition>())).nameIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppParameterDefinition>())).token as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppParameterDefinition>())).typeIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefinition),
            "::",
            stringify!(typeIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppParameterDefaultValue {
    pub parameterIndex: ParameterIndex,
    pub typeIndex: TypeIndex,
    pub dataIndex: DefaultValueDataIndex,
}
#[test]
fn bindgen_test_layout_Il2CppParameterDefaultValue() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppParameterDefaultValue>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppParameterDefaultValue))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppParameterDefaultValue>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppParameterDefaultValue))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppParameterDefaultValue>())).parameterIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefaultValue),
            "::",
            stringify!(parameterIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppParameterDefaultValue>())).typeIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefaultValue),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppParameterDefaultValue>())).dataIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppParameterDefaultValue),
            "::",
            stringify!(dataIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodDefinition {
    pub nameIndex: StringIndex,
    pub declaringType: TypeDefinitionIndex,
    pub returnType: TypeIndex,
    pub parameterStart: ParameterIndex,
    pub genericContainerIndex: GenericContainerIndex,
    pub methodIndex: MethodIndex,
    pub invokerIndex: MethodIndex,
    pub reversePInvokeWrapperIndex: MethodIndex,
    pub rgctxStartIndex: RGCTXIndex,
    pub rgctxCount: i32,
    pub token: u32,
    pub flags: u16,
    pub iflags: u16,
    pub slot: u16,
    pub parameterCount: u16,
}
#[test]
fn bindgen_test_layout_Il2CppMethodDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodDefinition>(),
        52usize,
        concat!("Size of: ", stringify!(Il2CppMethodDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodDefinition))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).nameIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).declaringType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).returnType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(returnType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).parameterStart as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(parameterStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).genericContainerIndex as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(genericContainerIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).methodIndex as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(methodIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).invokerIndex as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(invokerIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).reversePInvokeWrapperIndex
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(reversePInvokeWrapperIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).rgctxStartIndex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(rgctxStartIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).rgctxCount as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(rgctxCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodDefinition>())).token as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodDefinition>())).flags as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodDefinition>())).iflags as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(iflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodDefinition>())).slot as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodDefinition>())).parameterCount as *const _ as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodDefinition),
            "::",
            stringify!(parameterCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppEventDefinition {
    pub nameIndex: StringIndex,
    pub typeIndex: TypeIndex,
    pub add: MethodIndex,
    pub remove: MethodIndex,
    pub raise: MethodIndex,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppEventDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppEventDefinition>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppEventDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppEventDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppEventDefinition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppEventDefinition>())).nameIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppEventDefinition>())).typeIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppEventDefinition>())).add as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppEventDefinition>())).remove as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppEventDefinition>())).raise as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(raise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppEventDefinition>())).token as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppEventDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppPropertyDefinition {
    pub nameIndex: StringIndex,
    pub get: MethodIndex,
    pub set: MethodIndex,
    pub attrs: u32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppPropertyDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppPropertyDefinition>(),
        20usize,
        concat!("Size of: ", stringify!(Il2CppPropertyDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppPropertyDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppPropertyDefinition))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPropertyDefinition>())).nameIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyDefinition>())).get as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyDefinition>())).set as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyDefinition>())).attrs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyDefinition>())).token as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyDefinition),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodSpec {
    pub methodDefinitionIndex: MethodIndex,
    pub classIndexIndex: GenericInstIndex,
    pub methodIndexIndex: GenericInstIndex,
}
#[test]
fn bindgen_test_layout_Il2CppMethodSpec() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodSpec>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppMethodSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodSpec>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodSpec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodSpec>())).methodDefinitionIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodSpec),
            "::",
            stringify!(methodDefinitionIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodSpec>())).classIndexIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodSpec),
            "::",
            stringify!(classIndexIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodSpec>())).methodIndexIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodSpec),
            "::",
            stringify!(methodIndexIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppStringLiteral {
    pub length: u32,
    pub dataIndex: StringLiteralIndex,
}
#[test]
fn bindgen_test_layout_Il2CppStringLiteral() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppStringLiteral>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppStringLiteral))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStringLiteral>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppStringLiteral))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStringLiteral>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringLiteral),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStringLiteral>())).dataIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringLiteral),
            "::",
            stringify!(dataIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericMethodIndices {
    pub methodIndex: MethodIndex,
    pub invokerIndex: MethodIndex,
}
#[test]
fn bindgen_test_layout_Il2CppGenericMethodIndices() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericMethodIndices>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppGenericMethodIndices))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericMethodIndices>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGenericMethodIndices))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericMethodIndices>())).methodIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodIndices),
            "::",
            stringify!(methodIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericMethodIndices>())).invokerIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodIndices),
            "::",
            stringify!(invokerIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericMethodFunctionsDefinitions {
    pub genericMethodIndex: GenericMethodIndex,
    pub indices: Il2CppGenericMethodIndices,
}
#[test]
fn bindgen_test_layout_Il2CppGenericMethodFunctionsDefinitions() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericMethodFunctionsDefinitions>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericMethodFunctionsDefinitions>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericMethodFunctionsDefinitions>())).genericMethodIndex
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions),
            "::",
            stringify!(genericMethodIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericMethodFunctionsDefinitions>())).indices as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethodFunctionsDefinitions),
            "::",
            stringify!(indices)
        )
    );
}
pub const kPublicKeyByteLength: ::std::os::raw::c_int = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssemblyNameDefinition {
    pub nameIndex: StringIndex,
    pub cultureIndex: StringIndex,
    pub hashValueIndex: StringIndex,
    pub publicKeyIndex: StringIndex,
    pub hash_alg: u32,
    pub hash_len: i32,
    pub flags: u32,
    pub major: i32,
    pub minor: i32,
    pub build: i32,
    pub revision: i32,
    pub public_key_token: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_Il2CppAssemblyNameDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssemblyNameDefinition>(),
        52usize,
        concat!("Size of: ", stringify!(Il2CppAssemblyNameDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssemblyNameDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppAssemblyNameDefinition))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).nameIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).cultureIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(cultureIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).hashValueIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(hashValueIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).publicKeyIndex as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(publicKeyIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).hash_alg as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(hash_alg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).hash_len as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(hash_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).flags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).major as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).minor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).build as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).revision as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyNameDefinition>())).public_key_token as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyNameDefinition),
            "::",
            stringify!(public_key_token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppImageDefinition {
    pub nameIndex: StringIndex,
    pub assemblyIndex: AssemblyIndex,
    pub typeStart: TypeDefinitionIndex,
    pub typeCount: u32,
    pub exportedTypeStart: TypeDefinitionIndex,
    pub exportedTypeCount: u32,
    pub entryPointIndex: MethodIndex,
    pub token: u32,
    pub customAttributeStart: CustomAttributeIndex,
    pub customAttributeCount: u32,
}
#[test]
fn bindgen_test_layout_Il2CppImageDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppImageDefinition>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppImageDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppImageDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppImageDefinition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImageDefinition>())).nameIndex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImageDefinition>())).assemblyIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(assemblyIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImageDefinition>())).typeStart as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(typeStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImageDefinition>())).typeCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(typeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImageDefinition>())).exportedTypeStart as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(exportedTypeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImageDefinition>())).exportedTypeCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(exportedTypeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImageDefinition>())).entryPointIndex as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(entryPointIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImageDefinition>())).token as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImageDefinition>())).customAttributeStart as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(customAttributeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImageDefinition>())).customAttributeCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImageDefinition),
            "::",
            stringify!(customAttributeCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssemblyDefinition {
    pub imageIndex: ImageIndex,
    pub token: u32,
    pub referencedAssemblyStart: i32,
    pub referencedAssemblyCount: i32,
    pub aname: Il2CppAssemblyNameDefinition,
}
#[test]
fn bindgen_test_layout_Il2CppAssemblyDefinition() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssemblyDefinition>(),
        68usize,
        concat!("Size of: ", stringify!(Il2CppAssemblyDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssemblyDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppAssemblyDefinition))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyDefinition>())).imageIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(imageIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyDefinition>())).token as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyDefinition>())).referencedAssemblyStart as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(referencedAssemblyStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyDefinition>())).referencedAssemblyCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(referencedAssemblyCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyDefinition>())).aname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyDefinition),
            "::",
            stringify!(aname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataUsageList {
    pub start: u32,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataUsageList() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataUsageList>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppMetadataUsageList))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataUsageList>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataUsageList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMetadataUsageList>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataUsageList),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMetadataUsageList>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataUsageList),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataUsagePair {
    pub destinationIndex: u32,
    pub encodedSourceIndex: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataUsagePair() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataUsagePair>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppMetadataUsagePair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataUsagePair>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataUsagePair))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataUsagePair>())).destinationIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataUsagePair),
            "::",
            stringify!(destinationIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataUsagePair>())).encodedSourceIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataUsagePair),
            "::",
            stringify!(encodedSourceIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCustomAttributeTypeRange {
    pub token: u32,
    pub start: i32,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_Il2CppCustomAttributeTypeRange() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppCustomAttributeTypeRange>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppCustomAttributeTypeRange))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCustomAttributeTypeRange>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppCustomAttributeTypeRange))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCustomAttributeTypeRange>())).token as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCustomAttributeTypeRange),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCustomAttributeTypeRange>())).start as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCustomAttributeTypeRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCustomAttributeTypeRange>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCustomAttributeTypeRange),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppRange {
    pub start: i32,
    pub length: i32,
}
#[test]
fn bindgen_test_layout_Il2CppRange() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppRange>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppRange))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRange>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRange>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRange>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRange),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWindowsRuntimeTypeNamePair {
    pub nameIndex: StringIndex,
    pub typeIndex: TypeIndex,
}
#[test]
fn bindgen_test_layout_Il2CppWindowsRuntimeTypeNamePair() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppWindowsRuntimeTypeNamePair>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppWindowsRuntimeTypeNamePair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWindowsRuntimeTypeNamePair>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWindowsRuntimeTypeNamePair)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWindowsRuntimeTypeNamePair>())).nameIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeNamePair),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWindowsRuntimeTypeNamePair>())).typeIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeNamePair),
            "::",
            stringify!(typeIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGlobalMetadataHeader {
    pub sanity: i32,
    pub version: i32,
    pub stringLiteralOffset: i32,
    pub stringLiteralCount: i32,
    pub stringLiteralDataOffset: i32,
    pub stringLiteralDataCount: i32,
    pub stringOffset: i32,
    pub stringCount: i32,
    pub eventsOffset: i32,
    pub eventsCount: i32,
    pub propertiesOffset: i32,
    pub propertiesCount: i32,
    pub methodsOffset: i32,
    pub methodsCount: i32,
    pub parameterDefaultValuesOffset: i32,
    pub parameterDefaultValuesCount: i32,
    pub fieldDefaultValuesOffset: i32,
    pub fieldDefaultValuesCount: i32,
    pub fieldAndParameterDefaultValueDataOffset: i32,
    pub fieldAndParameterDefaultValueDataCount: i32,
    pub fieldMarshaledSizesOffset: i32,
    pub fieldMarshaledSizesCount: i32,
    pub parametersOffset: i32,
    pub parametersCount: i32,
    pub fieldsOffset: i32,
    pub fieldsCount: i32,
    pub genericParametersOffset: i32,
    pub genericParametersCount: i32,
    pub genericParameterConstraintsOffset: i32,
    pub genericParameterConstraintsCount: i32,
    pub genericContainersOffset: i32,
    pub genericContainersCount: i32,
    pub nestedTypesOffset: i32,
    pub nestedTypesCount: i32,
    pub interfacesOffset: i32,
    pub interfacesCount: i32,
    pub vtableMethodsOffset: i32,
    pub vtableMethodsCount: i32,
    pub interfaceOffsetsOffset: i32,
    pub interfaceOffsetsCount: i32,
    pub typeDefinitionsOffset: i32,
    pub typeDefinitionsCount: i32,
    pub rgctxEntriesOffset: i32,
    pub rgctxEntriesCount: i32,
    pub imagesOffset: i32,
    pub imagesCount: i32,
    pub assembliesOffset: i32,
    pub assembliesCount: i32,
    pub metadataUsageListsOffset: i32,
    pub metadataUsageListsCount: i32,
    pub metadataUsagePairsOffset: i32,
    pub metadataUsagePairsCount: i32,
    pub fieldRefsOffset: i32,
    pub fieldRefsCount: i32,
    pub referencedAssembliesOffset: i32,
    pub referencedAssembliesCount: i32,
    pub attributesInfoOffset: i32,
    pub attributesInfoCount: i32,
    pub attributeTypesOffset: i32,
    pub attributeTypesCount: i32,
    pub unresolvedVirtualCallParameterTypesOffset: i32,
    pub unresolvedVirtualCallParameterTypesCount: i32,
    pub unresolvedVirtualCallParameterRangesOffset: i32,
    pub unresolvedVirtualCallParameterRangesCount: i32,
    pub windowsRuntimeTypeNamesOffset: i32,
    pub windowsRuntimeTypeNamesSize: i32,
    pub exportedTypeDefinitionsOffset: i32,
    pub exportedTypeDefinitionsCount: i32,
}
#[test]
fn bindgen_test_layout_Il2CppGlobalMetadataHeader() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGlobalMetadataHeader>(),
        272usize,
        concat!("Size of: ", stringify!(Il2CppGlobalMetadataHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGlobalMetadataHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGlobalMetadataHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).sanity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(sanity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).stringLiteralOffset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).stringLiteralCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).stringLiteralDataOffset
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralDataOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).stringLiteralDataCount
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringLiteralDataCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).stringOffset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).stringCount as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(stringCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).eventsOffset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(eventsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).eventsCount as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(eventsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).propertiesOffset as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(propertiesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).propertiesCount as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(propertiesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).methodsOffset as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(methodsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).methodsCount as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(methodsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).parameterDefaultValuesOffset
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parameterDefaultValuesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).parameterDefaultValuesCount
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parameterDefaultValuesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldDefaultValuesOffset
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldDefaultValuesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldDefaultValuesCount
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldDefaultValuesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>()))
                .fieldAndParameterDefaultValueDataOffset as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldAndParameterDefaultValueDataOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>()))
                .fieldAndParameterDefaultValueDataCount as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldAndParameterDefaultValueDataCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldMarshaledSizesOffset
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldMarshaledSizesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldMarshaledSizesCount
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldMarshaledSizesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).parametersOffset as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parametersOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).parametersCount as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(parametersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldsOffset as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldsCount as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).genericParametersOffset
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParametersOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).genericParametersCount
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParametersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).genericParameterConstraintsOffset
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParameterConstraintsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).genericParameterConstraintsCount
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericParameterConstraintsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).genericContainersOffset
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericContainersOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).genericContainersCount
                as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(genericContainersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).nestedTypesOffset as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(nestedTypesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).nestedTypesCount as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(nestedTypesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).interfacesOffset as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfacesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).interfacesCount as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfacesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).vtableMethodsOffset as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(vtableMethodsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).vtableMethodsCount as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(vtableMethodsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).interfaceOffsetsOffset
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfaceOffsetsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).interfaceOffsetsCount as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(interfaceOffsetsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).typeDefinitionsOffset as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(typeDefinitionsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).typeDefinitionsCount as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(typeDefinitionsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).rgctxEntriesOffset as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(rgctxEntriesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).rgctxEntriesCount as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(rgctxEntriesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).imagesOffset as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(imagesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).imagesCount as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(imagesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).assembliesOffset as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(assembliesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).assembliesCount as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(assembliesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).metadataUsageListsOffset
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(metadataUsageListsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).metadataUsageListsCount
                as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(metadataUsageListsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).metadataUsagePairsOffset
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(metadataUsagePairsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).metadataUsagePairsCount
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(metadataUsagePairsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldRefsOffset as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldRefsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).fieldRefsCount as *const _
                as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(fieldRefsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).referencedAssembliesOffset
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(referencedAssembliesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).referencedAssembliesCount
                as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(referencedAssembliesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).attributesInfoOffset as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributesInfoOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).attributesInfoCount as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributesInfoCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).attributeTypesOffset as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributeTypesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).attributeTypesCount as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(attributeTypesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>()))
                .unresolvedVirtualCallParameterTypesOffset as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterTypesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>()))
                .unresolvedVirtualCallParameterTypesCount as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterTypesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>()))
                .unresolvedVirtualCallParameterRangesOffset as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterRangesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>()))
                .unresolvedVirtualCallParameterRangesCount as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(unresolvedVirtualCallParameterRangesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).windowsRuntimeTypeNamesOffset
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(windowsRuntimeTypeNamesOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).windowsRuntimeTypeNamesSize
                as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(windowsRuntimeTypeNamesSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).exportedTypeDefinitionsOffset
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(exportedTypeDefinitionsOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGlobalMetadataHeader>())).exportedTypeDefinitionsCount
                as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGlobalMetadataHeader),
            "::",
            stringify!(exportedTypeDefinitionsCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppArrayType {
    pub etype: *const Il2CppType,
    pub rank: u8,
    pub numsizes: u8,
    pub numlobounds: u8,
    pub sizes: *mut ::std::os::raw::c_int,
    pub lobounds: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppArrayType() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppArrayType>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppArrayType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArrayType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArrayType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayType>())).etype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(etype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayType>())).rank as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayType>())).numsizes as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(numsizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayType>())).numlobounds as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(numlobounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayType>())).sizes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayType>())).lobounds as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayType),
            "::",
            stringify!(lobounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericInst {
    pub type_argc: u32,
    pub type_argv: *mut *const Il2CppType,
}
#[test]
fn bindgen_test_layout_Il2CppGenericInst() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericInst>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericInst))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericInst>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericInst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericInst>())).type_argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericInst),
            "::",
            stringify!(type_argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericInst>())).type_argv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericInst),
            "::",
            stringify!(type_argv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericContext {
    pub class_inst: *const Il2CppGenericInst,
    pub method_inst: *const Il2CppGenericInst,
}
#[test]
fn bindgen_test_layout_Il2CppGenericContext() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericContext>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericContext))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericContext>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericContext>())).class_inst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContext),
            "::",
            stringify!(class_inst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericContext>())).method_inst as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContext),
            "::",
            stringify!(method_inst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericParameter {
    pub ownerIndex: GenericContainerIndex,
    pub nameIndex: StringIndex,
    pub constraintsStart: GenericParameterConstraintIndex,
    pub constraintsCount: i16,
    pub num: u16,
    pub flags: u16,
}
#[test]
fn bindgen_test_layout_Il2CppGenericParameter() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericParameter>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericParameter>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGenericParameter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericParameter>())).ownerIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(ownerIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericParameter>())).nameIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericParameter>())).constraintsStart as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(constraintsStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericParameter>())).constraintsCount as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(constraintsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericParameter>())).num as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericParameter>())).flags as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericParameter),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericContainer {
    pub ownerIndex: i32,
    pub type_argc: i32,
    pub is_method: i32,
    pub genericParameterStart: GenericParameterIndex,
}
#[test]
fn bindgen_test_layout_Il2CppGenericContainer() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericContainer>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGenericContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericContainer>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGenericContainer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericContainer>())).ownerIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(ownerIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericContainer>())).type_argc as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(type_argc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericContainer>())).is_method as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(is_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericContainer>())).genericParameterStart as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericContainer),
            "::",
            stringify!(genericParameterStart)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericClass {
    pub typeDefinitionIndex: TypeDefinitionIndex,
    pub context: Il2CppGenericContext,
    pub cached_class: *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppGenericClass() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericClass>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppGenericClass))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericClass>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericClass))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericClass>())).typeDefinitionIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericClass),
            "::",
            stringify!(typeDefinitionIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericClass>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericClass),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericClass>())).cached_class as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericClass),
            "::",
            stringify!(cached_class)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGenericMethod {
    pub methodDefinition: *const MethodInfo,
    pub context: Il2CppGenericContext,
}
#[test]
fn bindgen_test_layout_Il2CppGenericMethod() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGenericMethod>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppGenericMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGenericMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppGenericMethod))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppGenericMethod>())).methodDefinition as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethod),
            "::",
            stringify!(methodDefinition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGenericMethod>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGenericMethod),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppType {
    pub data: Il2CppType__bindgen_ty_1,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_padding_0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppType__bindgen_ty_1 {
    pub dummy: *mut ::std::os::raw::c_void,
    pub klassIndex: TypeDefinitionIndex,
    pub type_: *const Il2CppType,
    pub array: *mut Il2CppArrayType,
    pub genericParameterIndex: GenericParameterIndex,
    pub generic_class: *mut Il2CppGenericClass,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Il2CppType__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppType__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppType__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppType__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppType__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppType__bindgen_ty_1>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppType__bindgen_ty_1>())).klassIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(klassIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppType__bindgen_ty_1>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppType__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppType__bindgen_ty_1>())).genericParameterIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(genericParameterIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppType__bindgen_ty_1>())).generic_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType__bindgen_ty_1),
            "::",
            stringify!(generic_class)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppType() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppType>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppType>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppType),
            "::",
            stringify!(data)
        )
    );
}
impl Il2CppType {
    #[inline]
    pub fn attrs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_attrs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> Il2CppTypeEnum {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: Il2CppTypeEnum) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn num_mods(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_num_mods(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn byref(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_byref(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pinned(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pinned(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        attrs: ::std::os::raw::c_uint,
        type_: Il2CppTypeEnum,
        num_mods: ::std::os::raw::c_uint,
        byref: ::std::os::raw::c_uint,
        pinned: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let attrs: u32 = unsafe { ::std::mem::transmute(attrs) };
            attrs as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(24usize, 6u8, {
            let num_mods: u32 = unsafe { ::std::mem::transmute(num_mods) };
            num_mods as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let byref: u32 = unsafe { ::std::mem::transmute(byref) };
            byref as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let pinned: u32 = unsafe { ::std::mem::transmute(pinned) };
            pinned as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const Il2CppCallConvention_IL2CPP_CALL_DEFAULT: Il2CppCallConvention = 0;
pub const Il2CppCallConvention_IL2CPP_CALL_C: Il2CppCallConvention = 1;
pub const Il2CppCallConvention_IL2CPP_CALL_STDCALL: Il2CppCallConvention = 2;
pub const Il2CppCallConvention_IL2CPP_CALL_THISCALL: Il2CppCallConvention = 3;
pub const Il2CppCallConvention_IL2CPP_CALL_FASTCALL: Il2CppCallConvention = 4;
pub const Il2CppCallConvention_IL2CPP_CALL_VARARG: Il2CppCallConvention = 5;
pub type Il2CppCallConvention = i32;
pub const Il2CppCharSet_CHARSET_ANSI: Il2CppCharSet = 0;
pub const Il2CppCharSet_CHARSET_UNICODE: Il2CppCharSet = 1;
pub const Il2CppCharSet_CHARSET_NOT_SPECIFIED: Il2CppCharSet = 2;
pub type Il2CppCharSet = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppNameToTypeDefinitionIndexHashTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VirtualInvokeData {
    pub methodPtr: Il2CppMethodPointer,
    pub method: *const MethodInfo,
}
#[test]
fn bindgen_test_layout_VirtualInvokeData() {
    assert_eq!(
        ::std::mem::size_of::<VirtualInvokeData>(),
        16usize,
        concat!("Size of: ", stringify!(VirtualInvokeData))
    );
    assert_eq!(
        ::std::mem::align_of::<VirtualInvokeData>(),
        8usize,
        concat!("Alignment of ", stringify!(VirtualInvokeData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VirtualInvokeData>())).methodPtr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VirtualInvokeData),
            "::",
            stringify!(methodPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VirtualInvokeData>())).method as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VirtualInvokeData),
            "::",
            stringify!(method)
        )
    );
}
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_IL: Il2CppTypeNameFormat = 0;
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_REFLECTION: Il2CppTypeNameFormat = 1;
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_FULL_NAME: Il2CppTypeNameFormat = 2;
pub const Il2CppTypeNameFormat_IL2CPP_TYPE_NAME_FORMAT_ASSEMBLY_QUALIFIED: Il2CppTypeNameFormat = 3;
pub type Il2CppTypeNameFormat = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDefaults {
    pub corlib: *mut Il2CppImage,
    pub object_class: *mut Il2CppClass,
    pub byte_class: *mut Il2CppClass,
    pub void_class: *mut Il2CppClass,
    pub boolean_class: *mut Il2CppClass,
    pub sbyte_class: *mut Il2CppClass,
    pub int16_class: *mut Il2CppClass,
    pub uint16_class: *mut Il2CppClass,
    pub int32_class: *mut Il2CppClass,
    pub uint32_class: *mut Il2CppClass,
    pub int_class: *mut Il2CppClass,
    pub uint_class: *mut Il2CppClass,
    pub int64_class: *mut Il2CppClass,
    pub uint64_class: *mut Il2CppClass,
    pub single_class: *mut Il2CppClass,
    pub double_class: *mut Il2CppClass,
    pub char_class: *mut Il2CppClass,
    pub string_class: *mut Il2CppClass,
    pub enum_class: *mut Il2CppClass,
    pub array_class: *mut Il2CppClass,
    pub delegate_class: *mut Il2CppClass,
    pub multicastdelegate_class: *mut Il2CppClass,
    pub asyncresult_class: *mut Il2CppClass,
    pub manualresetevent_class: *mut Il2CppClass,
    pub typehandle_class: *mut Il2CppClass,
    pub fieldhandle_class: *mut Il2CppClass,
    pub methodhandle_class: *mut Il2CppClass,
    pub systemtype_class: *mut Il2CppClass,
    pub monotype_class: *mut Il2CppClass,
    pub exception_class: *mut Il2CppClass,
    pub threadabortexception_class: *mut Il2CppClass,
    pub thread_class: *mut Il2CppClass,
    pub internal_thread_class: *mut Il2CppClass,
    pub appdomain_class: *mut Il2CppClass,
    pub appdomain_setup_class: *mut Il2CppClass,
    pub field_info_class: *mut Il2CppClass,
    pub method_info_class: *mut Il2CppClass,
    pub property_info_class: *mut Il2CppClass,
    pub event_info_class: *mut Il2CppClass,
    pub mono_event_info_class: *mut Il2CppClass,
    pub stringbuilder_class: *mut Il2CppClass,
    pub stack_frame_class: *mut Il2CppClass,
    pub stack_trace_class: *mut Il2CppClass,
    pub marshal_class: *mut Il2CppClass,
    pub typed_reference_class: *mut Il2CppClass,
    pub marshalbyrefobject_class: *mut Il2CppClass,
    pub generic_ilist_class: *mut Il2CppClass,
    pub generic_icollection_class: *mut Il2CppClass,
    pub generic_ienumerable_class: *mut Il2CppClass,
    pub generic_ireadonlylist_class: *mut Il2CppClass,
    pub generic_ireadonlycollection_class: *mut Il2CppClass,
    pub runtimetype_class: *mut Il2CppClass,
    pub generic_nullable_class: *mut Il2CppClass,
    pub il2cpp_com_object_class: *mut Il2CppClass,
    pub attribute_class: *mut Il2CppClass,
    pub customattribute_data_class: *mut Il2CppClass,
    pub version: *mut Il2CppClass,
    pub culture_info: *mut Il2CppClass,
    pub async_call_class: *mut Il2CppClass,
    pub assembly_class: *mut Il2CppClass,
    pub mono_assembly_class: *mut Il2CppClass,
    pub assembly_name_class: *mut Il2CppClass,
    pub mono_field_class: *mut Il2CppClass,
    pub mono_method_class: *mut Il2CppClass,
    pub mono_method_info_class: *mut Il2CppClass,
    pub mono_property_info_class: *mut Il2CppClass,
    pub parameter_info_class: *mut Il2CppClass,
    pub mono_parameter_info_class: *mut Il2CppClass,
    pub module_class: *mut Il2CppClass,
    pub pointer_class: *mut Il2CppClass,
    pub system_exception_class: *mut Il2CppClass,
    pub argument_exception_class: *mut Il2CppClass,
    pub wait_handle_class: *mut Il2CppClass,
    pub safe_handle_class: *mut Il2CppClass,
    pub sort_key_class: *mut Il2CppClass,
    pub dbnull_class: *mut Il2CppClass,
    pub error_wrapper_class: *mut Il2CppClass,
    pub missing_class: *mut Il2CppClass,
    pub value_type_class: *mut Il2CppClass,
    pub threadpool_wait_callback_class: *mut Il2CppClass,
    pub threadpool_perform_wait_callback_method: *mut MethodInfo,
    pub mono_method_message_class: *mut Il2CppClass,
    pub ireference_class: *mut Il2CppClass,
    pub ireferencearray_class: *mut Il2CppClass,
    pub ikey_value_pair_class: *mut Il2CppClass,
    pub key_value_pair_class: *mut Il2CppClass,
    pub windows_foundation_uri_class: *mut Il2CppClass,
    pub windows_foundation_iuri_runtime_class_class: *mut Il2CppClass,
    pub system_uri_class: *mut Il2CppClass,
    pub system_guid_class: *mut Il2CppClass,
    pub sbyte_shared_enum: *mut Il2CppClass,
    pub int16_shared_enum: *mut Il2CppClass,
    pub int32_shared_enum: *mut Il2CppClass,
    pub int64_shared_enum: *mut Il2CppClass,
    pub byte_shared_enum: *mut Il2CppClass,
    pub uint16_shared_enum: *mut Il2CppClass,
    pub uint32_shared_enum: *mut Il2CppClass,
    pub uint64_shared_enum: *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppDefaults() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDefaults>(),
        784usize,
        concat!("Size of: ", stringify!(Il2CppDefaults))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDefaults>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDefaults))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).corlib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(corlib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).object_class as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(object_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).byte_class as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(byte_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).void_class as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(void_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).boolean_class as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(boolean_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).sbyte_class as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(sbyte_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).int16_class as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int16_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).uint16_class as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint16_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).int32_class as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int32_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).uint32_class as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint32_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).int_class as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).uint_class as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).int64_class as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int64_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).uint64_class as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint64_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).single_class as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(single_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).double_class as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(double_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).char_class as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(char_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).string_class as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(string_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).enum_class as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(enum_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).array_class as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(array_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).delegate_class as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(delegate_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).multicastdelegate_class as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(multicastdelegate_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).asyncresult_class as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(asyncresult_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).manualresetevent_class as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(manualresetevent_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).typehandle_class as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(typehandle_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).fieldhandle_class as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(fieldhandle_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).methodhandle_class as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(methodhandle_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).systemtype_class as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(systemtype_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).monotype_class as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(monotype_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).exception_class as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(exception_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).threadabortexception_class as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(threadabortexception_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).thread_class as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(thread_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).internal_thread_class as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(internal_thread_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).appdomain_class as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(appdomain_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).appdomain_setup_class as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(appdomain_setup_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).field_info_class as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(field_info_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).method_info_class as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(method_info_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).property_info_class as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(property_info_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).event_info_class as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(event_info_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).mono_event_info_class as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_event_info_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).stringbuilder_class as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(stringbuilder_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).stack_frame_class as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(stack_frame_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).stack_trace_class as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(stack_trace_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).marshal_class as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(marshal_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).typed_reference_class as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(typed_reference_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).marshalbyrefobject_class as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(marshalbyrefobject_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).generic_ilist_class as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ilist_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).generic_icollection_class as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_icollection_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).generic_ienumerable_class as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ienumerable_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).generic_ireadonlylist_class as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ireadonlylist_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).generic_ireadonlycollection_class as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_ireadonlycollection_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).runtimetype_class as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(runtimetype_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).generic_nullable_class as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(generic_nullable_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).il2cpp_com_object_class as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(il2cpp_com_object_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).attribute_class as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(attribute_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).customattribute_data_class as *const _
                as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(customattribute_data_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).version as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).culture_info as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(culture_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).async_call_class as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(async_call_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).assembly_class as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(assembly_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).mono_assembly_class as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_assembly_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).assembly_name_class as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(assembly_name_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).mono_field_class as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_field_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).mono_method_class as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_method_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).mono_method_info_class as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_method_info_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).mono_property_info_class as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_property_info_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).parameter_info_class as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(parameter_info_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).mono_parameter_info_class as *const _
                as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_parameter_info_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).module_class as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(module_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).pointer_class as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(pointer_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).system_exception_class as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(system_exception_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).argument_exception_class as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(argument_exception_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).wait_handle_class as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(wait_handle_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).safe_handle_class as *const _ as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(safe_handle_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).sort_key_class as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(sort_key_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).dbnull_class as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(dbnull_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).error_wrapper_class as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(error_wrapper_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).missing_class as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(missing_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).value_type_class as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(value_type_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).threadpool_wait_callback_class as *const _
                as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(threadpool_wait_callback_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).threadpool_perform_wait_callback_method
                as *const _ as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(threadpool_perform_wait_callback_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).mono_method_message_class as *const _
                as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(mono_method_message_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).ireference_class as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(ireference_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).ireferencearray_class as *const _ as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(ireferencearray_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).ikey_value_pair_class as *const _ as usize
        },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(ikey_value_pair_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).key_value_pair_class as *const _ as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(key_value_pair_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).windows_foundation_uri_class as *const _
                as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(windows_foundation_uri_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).windows_foundation_iuri_runtime_class_class
                as *const _ as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(windows_foundation_iuri_runtime_class_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).system_uri_class as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(system_uri_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).system_guid_class as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(system_guid_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).sbyte_shared_enum as *const _ as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(sbyte_shared_enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).int16_shared_enum as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int16_shared_enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).int32_shared_enum as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int32_shared_enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).int64_shared_enum as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(int64_shared_enum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDefaults>())).byte_shared_enum as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(byte_shared_enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).uint16_shared_enum as *const _ as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint16_shared_enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).uint32_shared_enum as *const _ as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint32_shared_enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDefaults>())).uint64_shared_enum as *const _ as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDefaults),
            "::",
            stringify!(uint64_shared_enum)
        )
    );
}
extern "C" {
    pub static mut il2cpp_defaults: Il2CppDefaults;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemberInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomAttributesCache {
    pub count: ::std::os::raw::c_int,
    pub attributes: *mut *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_CustomAttributesCache() {
    assert_eq!(
        ::std::mem::size_of::<CustomAttributesCache>(),
        16usize,
        concat!("Size of: ", stringify!(CustomAttributesCache))
    );
    assert_eq!(
        ::std::mem::align_of::<CustomAttributesCache>(),
        8usize,
        concat!("Alignment of ", stringify!(CustomAttributesCache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CustomAttributesCache>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomAttributesCache),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CustomAttributesCache>())).attributes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CustomAttributesCache),
            "::",
            stringify!(attributes)
        )
    );
}
pub type CustomAttributesCacheGenerator =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut CustomAttributesCache)>;
pub const THREAD_STATIC_FIELD_OFFSET: ::std::os::raw::c_int = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FieldInfo {
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const Il2CppType,
    pub parent: *mut Il2CppClass,
    pub offset: i32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_FieldInfo() {
    assert_eq!(
        ::std::mem::size_of::<FieldInfo>(),
        32usize,
        concat!("Size of: ", stringify!(FieldInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FieldInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(FieldInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).token as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyInfo {
    pub parent: *mut Il2CppClass,
    pub name: *const ::std::os::raw::c_char,
    pub get: *const MethodInfo,
    pub set: *const MethodInfo,
    pub attrs: u32,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_PropertyInfo() {
    assert_eq!(
        ::std::mem::size_of::<PropertyInfo>(),
        40usize,
        concat!("Size of: ", stringify!(PropertyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyInfo>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyInfo>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyInfo>())).get as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyInfo>())).set as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyInfo>())).attrs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyInfo>())).token as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventInfo {
    pub name: *const ::std::os::raw::c_char,
    pub eventType: *const Il2CppType,
    pub parent: *mut Il2CppClass,
    pub add: *const MethodInfo,
    pub remove: *const MethodInfo,
    pub raise: *const MethodInfo,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_EventInfo() {
    assert_eq!(
        ::std::mem::size_of::<EventInfo>(),
        56usize,
        concat!("Size of: ", stringify!(EventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<EventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(EventInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EventInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EventInfo>())).eventType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(eventType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EventInfo>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EventInfo>())).add as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EventInfo>())).remove as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EventInfo>())).raise as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(raise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EventInfo>())).token as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EventInfo),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParameterInfo {
    pub name: *const ::std::os::raw::c_char,
    pub position: i32,
    pub token: u32,
    pub parameter_type: *const Il2CppType,
}
#[test]
fn bindgen_test_layout_ParameterInfo() {
    assert_eq!(
        ::std::mem::size_of::<ParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(ParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ParameterInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterInfo>())).position as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterInfo>())).token as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterInfo>())).parameter_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterInfo),
            "::",
            stringify!(parameter_type)
        )
    );
}
pub type InvokerMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: Il2CppMethodPointer,
        arg2: *const MethodInfo,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub const MethodVariableKind_kMethodVariableKind_This: MethodVariableKind = 0;
pub const MethodVariableKind_kMethodVariableKind_Parameter: MethodVariableKind = 1;
pub const MethodVariableKind_kMethodVariableKind_LocalVariable: MethodVariableKind = 2;
pub type MethodVariableKind = i32;
pub const SequencePointKind_kSequencePointKind_Normal: SequencePointKind = 0;
pub const SequencePointKind_kSequencePointKind_StepOut: SequencePointKind = 1;
pub type SequencePointKind = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodExecutionContextInfo {
    pub typeIndex: TypeIndex,
    pub nameIndex: i32,
    pub scopeIndex: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodExecutionContextInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodExecutionContextInfo>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppMethodExecutionContextInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodExecutionContextInfo>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppMethodExecutionContextInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodExecutionContextInfo>())).typeIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfo),
            "::",
            stringify!(typeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodExecutionContextInfo>())).nameIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfo),
            "::",
            stringify!(nameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodExecutionContextInfo>())).scopeIndex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfo),
            "::",
            stringify!(scopeIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodExecutionContextInfoIndex {
    pub tableIndex: i8,
    pub startIndex: i32,
    pub count: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodExecutionContextInfoIndex() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodExecutionContextInfoIndex>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppMethodExecutionContextInfoIndex)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodExecutionContextInfoIndex>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppMethodExecutionContextInfoIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodExecutionContextInfoIndex>())).tableIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfoIndex),
            "::",
            stringify!(tableIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodExecutionContextInfoIndex>())).startIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfoIndex),
            "::",
            stringify!(startIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodExecutionContextInfoIndex>())).count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodExecutionContextInfoIndex),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodScope {
    pub startOffset: i32,
    pub endOffset: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodScope() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodScope>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppMethodScope))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodScope>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodScope))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodScope>())).startOffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodScope),
            "::",
            stringify!(startOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodScope>())).endOffset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodScope),
            "::",
            stringify!(endOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodHeaderInfo {
    pub codeSize: i32,
    pub startScope: i32,
    pub numScopes: i32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodHeaderInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodHeaderInfo>(),
        12usize,
        concat!("Size of: ", stringify!(Il2CppMethodHeaderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodHeaderInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppMethodHeaderInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodHeaderInfo>())).codeSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodHeaderInfo),
            "::",
            stringify!(codeSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodHeaderInfo>())).startScope as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodHeaderInfo),
            "::",
            stringify!(startScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodHeaderInfo>())).numScopes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodHeaderInfo),
            "::",
            stringify!(numScopes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSequencePointIndex {
    pub tableIndex: u8,
    pub index: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSequencePointIndex() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSequencePointIndex>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppSequencePointIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSequencePointIndex>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSequencePointIndex))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSequencePointIndex>())).tableIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePointIndex),
            "::",
            stringify!(tableIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePointIndex>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePointIndex),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSequencePointSourceFile {
    pub file: *const ::std::os::raw::c_char,
    pub hash: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_Il2CppSequencePointSourceFile() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSequencePointSourceFile>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppSequencePointSourceFile))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSequencePointSourceFile>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSequencePointSourceFile))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSequencePointSourceFile>())).file as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePointSourceFile),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSequencePointSourceFile>())).hash as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePointSourceFile),
            "::",
            stringify!(hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypeSourceFilePair {
    pub klassIndex: TypeIndex,
    pub sourceFileIndex: i32,
}
#[test]
fn bindgen_test_layout_Il2CppTypeSourceFilePair() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypeSourceFilePair>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppTypeSourceFilePair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypeSourceFilePair>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppTypeSourceFilePair))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeSourceFilePair>())).klassIndex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeSourceFilePair),
            "::",
            stringify!(klassIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeSourceFilePair>())).sourceFileIndex as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeSourceFilePair),
            "::",
            stringify!(sourceFileIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSequencePoint {
    pub methodDefinitionIndex: MethodIndex,
    pub catchTypeIndex: TypeIndex,
    pub sourceFileIndex: i32,
    pub lineStart: i32,
    pub lineEnd: i32,
    pub columnStart: i32,
    pub columnEnd: i32,
    pub ilOffset: i32,
    pub kind: SequencePointKind,
    pub isActive: u8,
    pub id: i32,
    pub tryDepth: u8,
}
#[test]
fn bindgen_test_layout_Il2CppSequencePoint() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSequencePoint>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppSequencePoint))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSequencePoint>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSequencePoint))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSequencePoint>())).methodDefinitionIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(methodDefinitionIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSequencePoint>())).catchTypeIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(catchTypeIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSequencePoint>())).sourceFileIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(sourceFileIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).lineStart as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(lineStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).lineEnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(lineEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).columnStart as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(columnStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).columnEnd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(columnEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).ilOffset as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(ilOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).kind as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).isActive as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(isActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSequencePoint>())).tryDepth as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSequencePoint),
            "::",
            stringify!(tryDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDebuggerMetadataRegistration {
    pub methodExecutionContextInfos: *mut *mut Il2CppMethodExecutionContextInfo,
    pub methodExecutionContextInfoIndexes: *mut Il2CppMethodExecutionContextInfoIndex,
    pub methodScopes: *mut Il2CppMethodScope,
    pub methodHeaderInfos: *mut Il2CppMethodHeaderInfo,
    pub sequencePointSourceFiles: *mut Il2CppSequencePointSourceFile,
    pub numSequencePoints: i32,
    pub sequencePointIndexes: *mut Il2CppSequencePointIndex,
    pub sequencePoints: *mut *mut Il2CppSequencePoint,
    pub numTypeSourceFileEntries: i32,
    pub typeSourceFiles: *mut Il2CppTypeSourceFilePair,
    pub methodExecutionContextInfoStrings: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Il2CppDebuggerMetadataRegistration() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDebuggerMetadataRegistration>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppDebuggerMetadataRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDebuggerMetadataRegistration>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppDebuggerMetadataRegistration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>()))
                .methodExecutionContextInfos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodExecutionContextInfos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>()))
                .methodExecutionContextInfoIndexes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodExecutionContextInfoIndexes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).methodScopes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodScopes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).methodHeaderInfos
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodHeaderInfos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).sequencePointSourceFiles
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(sequencePointSourceFiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).numSequencePoints
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(numSequencePoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).sequencePointIndexes
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(sequencePointIndexes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).sequencePoints
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(sequencePoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).numTypeSourceFileEntries
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(numTypeSourceFileEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>())).typeSourceFiles
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(typeSourceFiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDebuggerMetadataRegistration>()))
                .methodExecutionContextInfoStrings as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDebuggerMetadataRegistration),
            "::",
            stringify!(methodExecutionContextInfoStrings)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppRGCTXData {
    pub rgctxDataDummy: *mut ::std::os::raw::c_void,
    pub method: *const MethodInfo,
    pub type_: *const Il2CppType,
    pub klass: *mut Il2CppClass,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Il2CppRGCTXData() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppRGCTXData>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppRGCTXData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRGCTXData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppRGCTXData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRGCTXData>())).rgctxDataDummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(rgctxDataDummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRGCTXData>())).method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRGCTXData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRGCTXData>())).klass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRGCTXData),
            "::",
            stringify!(klass)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MethodInfo {
    pub methodPointer: Il2CppMethodPointer,
    pub invoker_method: InvokerMethod,
    pub name: *const ::std::os::raw::c_char,
    pub klass: *mut Il2CppClass,
    pub return_type: *const Il2CppType,
    pub parameters: *const ParameterInfo,
    pub __bindgen_anon_1: MethodInfo__bindgen_ty_1,
    pub __bindgen_anon_2: MethodInfo__bindgen_ty_2,
    pub token: u32,
    pub flags: u16,
    pub iflags: u16,
    pub slot: u16,
    pub parameters_count: u8,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MethodInfo__bindgen_ty_1 {
    pub rgctx_data: *const Il2CppRGCTXData,
    pub methodDefinition: *const Il2CppMethodDefinition,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_MethodInfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<MethodInfo__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(MethodInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MethodInfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(MethodInfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MethodInfo__bindgen_ty_1>())).rgctx_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_1),
            "::",
            stringify!(rgctx_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MethodInfo__bindgen_ty_1>())).methodDefinition as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_1),
            "::",
            stringify!(methodDefinition)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MethodInfo__bindgen_ty_2 {
    pub genericMethod: *const Il2CppGenericMethod,
    pub genericContainer: *const Il2CppGenericContainer,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_MethodInfo__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<MethodInfo__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(MethodInfo__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<MethodInfo__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(MethodInfo__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MethodInfo__bindgen_ty_2>())).genericMethod as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_2),
            "::",
            stringify!(genericMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MethodInfo__bindgen_ty_2>())).genericContainer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo__bindgen_ty_2),
            "::",
            stringify!(genericContainer)
        )
    );
}
#[test]
fn bindgen_test_layout_MethodInfo() {
    assert_eq!(
        ::std::mem::size_of::<MethodInfo>(),
        80usize,
        concat!("Size of: ", stringify!(MethodInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MethodInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MethodInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).methodPointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(methodPointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).invoker_method as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(invoker_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).klass as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).return_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(return_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).parameters as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).token as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).flags as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).iflags as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(iflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).slot as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MethodInfo>())).parameters_count as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(MethodInfo),
            "::",
            stringify!(parameters_count)
        )
    );
}
impl MethodInfo {
    #[inline]
    pub fn is_generic(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_generic(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_inflated(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_inflated(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wrapper_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wrapper_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_marshaled_from_native(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_marshaled_from_native(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_generic: u8,
        is_inflated: u8,
        wrapper_type: u8,
        is_marshaled_from_native: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_generic: u8 = unsafe { ::std::mem::transmute(is_generic) };
            is_generic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_inflated: u8 = unsafe { ::std::mem::transmute(is_inflated) };
            is_inflated as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let wrapper_type: u8 = unsafe { ::std::mem::transmute(wrapper_type) };
            wrapper_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_marshaled_from_native: u8 =
                unsafe { ::std::mem::transmute(is_marshaled_from_native) };
            is_marshaled_from_native as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppRuntimeInterfaceOffsetPair {
    pub interfaceType: *mut Il2CppClass,
    pub offset: i32,
}
#[test]
fn bindgen_test_layout_Il2CppRuntimeInterfaceOffsetPair() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppRuntimeInterfaceOffsetPair>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppRuntimeInterfaceOffsetPair))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRuntimeInterfaceOffsetPair>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppRuntimeInterfaceOffsetPair)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeInterfaceOffsetPair>())).interfaceType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInterfaceOffsetPair),
            "::",
            stringify!(interfaceType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeInterfaceOffsetPair>())).offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeInterfaceOffsetPair),
            "::",
            stringify!(offset)
        )
    );
}
pub type PInvokeMarshalToNativeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        managedStructure: *mut ::std::os::raw::c_void,
        marshaledStructure: *mut ::std::os::raw::c_void,
    ),
>;
pub type PInvokeMarshalFromNativeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        marshaledStructure: *mut ::std::os::raw::c_void,
        managedStructure: *mut ::std::os::raw::c_void,
    ),
>;
pub type PInvokeMarshalCleanupFunc =
    ::std::option::Option<unsafe extern "C" fn(marshaledStructure: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppIUnknown {
    _unused: [u8; 0],
}
pub type CreateCCWFunc =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut Il2CppObject) -> *mut Il2CppIUnknown>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppInteropData {
    pub delegatePInvokeWrapperFunction: Il2CppMethodPointer,
    pub pinvokeMarshalToNativeFunction: PInvokeMarshalToNativeFunc,
    pub pinvokeMarshalFromNativeFunction: PInvokeMarshalFromNativeFunc,
    pub pinvokeMarshalCleanupFunction: PInvokeMarshalCleanupFunc,
    pub createCCWFunction: CreateCCWFunc,
    pub guid: *const Il2CppGuid,
    pub type_: *const Il2CppType,
}
#[test]
fn bindgen_test_layout_Il2CppInteropData() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppInteropData>(),
        56usize,
        concat!("Size of: ", stringify!(Il2CppInteropData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppInteropData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppInteropData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInteropData>())).delegatePInvokeWrapperFunction as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(delegatePInvokeWrapperFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInteropData>())).pinvokeMarshalToNativeFunction as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(pinvokeMarshalToNativeFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInteropData>())).pinvokeMarshalFromNativeFunction
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(pinvokeMarshalFromNativeFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInteropData>())).pinvokeMarshalCleanupFunction as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(pinvokeMarshalCleanupFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInteropData>())).createCCWFunction as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(createCCWFunction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInteropData>())).guid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInteropData>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInteropData),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
pub struct Il2CppClass {
    pub image: *const Il2CppImage,
    pub gc_desc: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub namespaze: *const ::std::os::raw::c_char,
    pub byval_arg: Il2CppType,
    pub this_arg: Il2CppType,
    pub element_class: *mut Il2CppClass,
    pub castClass: *mut Il2CppClass,
    pub declaringType: *mut Il2CppClass,
    pub parent: *mut Il2CppClass,
    pub generic_class: *mut Il2CppGenericClass,
    pub typeDefinition: *const Il2CppTypeDefinition,
    pub interopData: *const Il2CppInteropData,
    pub klass: *mut Il2CppClass,
    pub fields: *mut FieldInfo,
    pub events: *const EventInfo,
    pub properties: *const PropertyInfo,
    pub methods: *mut *const MethodInfo,
    pub nestedTypes: *mut *mut Il2CppClass,
    pub implementedInterfaces: *mut *mut Il2CppClass,
    pub interfaceOffsets: *mut Il2CppRuntimeInterfaceOffsetPair,
    pub static_fields: *mut ::std::os::raw::c_void,
    pub rgctx_data: *const Il2CppRGCTXData,
    pub typeHierarchy: *mut *mut Il2CppClass,
    pub initializationExceptionGCHandle: u32,
    pub cctor_started: u32,
    pub cctor_finished: u32,
    pub cctor_thread: u64,
    pub genericContainerIndex: GenericContainerIndex,
    pub instance_size: u32,
    pub actualSize: u32,
    pub element_size: u32,
    pub native_size: i32,
    pub static_fields_size: u32,
    pub thread_static_fields_size: u32,
    pub thread_static_fields_offset: i32,
    pub flags: u32,
    pub token: u32,
    pub method_count: u16,
    pub property_count: u16,
    pub field_count: u16,
    pub event_count: u16,
    pub nested_type_count: u16,
    pub vtable_count: u16,
    pub interfaces_count: u16,
    pub interface_offsets_count: u16,
    pub typeHierarchyDepth: u8,
    pub genericRecursionDepth: u8,
    pub rank: u8,
    pub minimumAlignment: u8,
    pub packingSize: u8,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
    pub vtable: __IncompleteArrayField<VirtualInvokeData>,
}
#[test]
fn bindgen_test_layout_Il2CppClass() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppClass>(),
        296usize,
        concat!("Size of: ", stringify!(Il2CppClass))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppClass>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).gc_desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(gc_desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).namespaze as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(namespaze)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).byval_arg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(byval_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).this_arg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(this_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).element_class as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(element_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).castClass as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(castClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).declaringType as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).parent as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).generic_class as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(generic_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).typeDefinition as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(typeDefinition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).interopData as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interopData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).klass as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).fields as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).events as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).properties as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).methods as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).nestedTypes as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(nestedTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppClass>())).implementedInterfaces as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(implementedInterfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).interfaceOffsets as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interfaceOffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).static_fields as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(static_fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).rgctx_data as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(rgctx_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).typeHierarchy as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(typeHierarchy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppClass>())).initializationExceptionGCHandle as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(initializationExceptionGCHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).cctor_started as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(cctor_started)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).cctor_finished as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(cctor_finished)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).cctor_thread as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(cctor_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppClass>())).genericContainerIndex as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(genericContainerIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).instance_size as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(instance_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).actualSize as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(actualSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).element_size as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).native_size as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(native_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).static_fields_size as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(static_fields_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppClass>())).thread_static_fields_size as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(thread_static_fields_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppClass>())).thread_static_fields_offset as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(thread_static_fields_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).flags as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).token as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).method_count as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(method_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).property_count as *const _ as usize },
        274usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(property_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).field_count as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(field_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).event_count as *const _ as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(event_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).nested_type_count as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(nested_type_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).vtable_count as *const _ as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(vtable_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).interfaces_count as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interfaces_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppClass>())).interface_offsets_count as *const _ as usize
        },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(interface_offsets_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).typeHierarchyDepth as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(typeHierarchyDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppClass>())).genericRecursionDepth as *const _ as usize
        },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(genericRecursionDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).rank as *const _ as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).minimumAlignment as *const _ as usize },
        291usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(minimumAlignment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).packingSize as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(packingSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppClass>())).vtable as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppClass),
            "::",
            stringify!(vtable)
        )
    );
}
impl Il2CppClass {
    #[inline]
    pub fn initialized_and_no_error(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_initialized_and_no_error(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn valuetype(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_valuetype(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn initialized(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_initialized(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enumtype(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enumtype(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_generic(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_generic(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_references(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_references(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn init_pending(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_init_pending(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn size_inited(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_size_inited(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_finalize(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_finalize(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_cctor(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_cctor(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_blittable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_blittable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_import_or_windows_runtime(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_import_or_windows_runtime(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_vtable_initialized(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_vtable_initialized(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_initialization_error(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_initialization_error(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        initialized_and_no_error: u8,
        valuetype: u8,
        initialized: u8,
        enumtype: u8,
        is_generic: u8,
        has_references: u8,
        init_pending: u8,
        size_inited: u8,
        has_finalize: u8,
        has_cctor: u8,
        is_blittable: u8,
        is_import_or_windows_runtime: u8,
        is_vtable_initialized: u8,
        has_initialization_error: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let initialized_and_no_error: u8 =
                unsafe { ::std::mem::transmute(initialized_and_no_error) };
            initialized_and_no_error as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let valuetype: u8 = unsafe { ::std::mem::transmute(valuetype) };
            valuetype as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let initialized: u8 = unsafe { ::std::mem::transmute(initialized) };
            initialized as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enumtype: u8 = unsafe { ::std::mem::transmute(enumtype) };
            enumtype as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_generic: u8 = unsafe { ::std::mem::transmute(is_generic) };
            is_generic as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_references: u8 = unsafe { ::std::mem::transmute(has_references) };
            has_references as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let init_pending: u8 = unsafe { ::std::mem::transmute(init_pending) };
            init_pending as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let size_inited: u8 = unsafe { ::std::mem::transmute(size_inited) };
            size_inited as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let has_finalize: u8 = unsafe { ::std::mem::transmute(has_finalize) };
            has_finalize as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let has_cctor: u8 = unsafe { ::std::mem::transmute(has_cctor) };
            has_cctor as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let is_blittable: u8 = unsafe { ::std::mem::transmute(is_blittable) };
            is_blittable as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let is_import_or_windows_runtime: u8 =
                unsafe { ::std::mem::transmute(is_import_or_windows_runtime) };
            is_import_or_windows_runtime as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_vtable_initialized: u8 = unsafe { ::std::mem::transmute(is_vtable_initialized) };
            is_vtable_initialized as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let has_initialization_error: u8 =
                unsafe { ::std::mem::transmute(has_initialization_error) };
            has_initialization_error as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypeDefinitionSizes {
    pub instance_size: u32,
    pub native_size: i32,
    pub static_fields_size: u32,
    pub thread_static_fields_size: u32,
}
#[test]
fn bindgen_test_layout_Il2CppTypeDefinitionSizes() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypeDefinitionSizes>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppTypeDefinitionSizes))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypeDefinitionSizes>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppTypeDefinitionSizes))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinitionSizes>())).instance_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(instance_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinitionSizes>())).native_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(native_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinitionSizes>())).static_fields_size as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(static_fields_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppTypeDefinitionSizes>())).thread_static_fields_size
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypeDefinitionSizes),
            "::",
            stringify!(thread_static_fields_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDomain {
    pub domain: *mut Il2CppAppDomain,
    pub setup: *mut Il2CppAppDomainSetup,
    pub default_context: *mut Il2CppAppContext,
    pub friendly_name: *const ::std::os::raw::c_char,
    pub domain_id: u32,
    pub threadpool_jobs: ::std::os::raw::c_int,
    pub agent_info: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppDomain() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDomain>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppDomain))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDomain>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDomain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDomain>())).domain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDomain>())).setup as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDomain>())).default_context as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(default_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDomain>())).friendly_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(friendly_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDomain>())).domain_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(domain_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDomain>())).threadpool_jobs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(threadpool_jobs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDomain>())).agent_info as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDomain),
            "::",
            stringify!(agent_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssemblyName {
    pub name: *const ::std::os::raw::c_char,
    pub culture: *const ::std::os::raw::c_char,
    pub hash_value: *const ::std::os::raw::c_char,
    pub public_key: *const ::std::os::raw::c_char,
    pub hash_alg: u32,
    pub hash_len: i32,
    pub flags: u32,
    pub major: i32,
    pub minor: i32,
    pub build: i32,
    pub revision: i32,
    pub public_key_token: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_Il2CppAssemblyName() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssemblyName>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppAssemblyName))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssemblyName>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAssemblyName))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).culture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(culture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).hash_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(hash_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).public_key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(public_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).hash_alg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(hash_alg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).hash_len as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(hash_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).major as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).minor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).build as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssemblyName>())).revision as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssemblyName>())).public_key_token as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssemblyName),
            "::",
            stringify!(public_key_token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppImage {
    pub name: *const ::std::os::raw::c_char,
    pub nameNoExt: *const ::std::os::raw::c_char,
    pub assembly: *mut Il2CppAssembly,
    pub typeStart: TypeDefinitionIndex,
    pub typeCount: u32,
    pub exportedTypeStart: TypeDefinitionIndex,
    pub exportedTypeCount: u32,
    pub customAttributeStart: CustomAttributeIndex,
    pub customAttributeCount: u32,
    pub entryPointIndex: MethodIndex,
    pub nameToClassHashTable: *mut Il2CppNameToTypeDefinitionIndexHashTable,
    pub token: u32,
    pub dynamic: u8,
}
#[test]
fn bindgen_test_layout_Il2CppImage() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppImage>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppImage))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppImage>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppImage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).nameNoExt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(nameNoExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).assembly as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).typeStart as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(typeStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).typeCount as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(typeCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).exportedTypeStart as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(exportedTypeStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).exportedTypeCount as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(exportedTypeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImage>())).customAttributeStart as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(customAttributeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImage>())).customAttributeCount as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(customAttributeCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).entryPointIndex as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(entryPointIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppImage>())).nameToClassHashTable as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(nameToClassHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).token as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppImage>())).dynamic as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppImage),
            "::",
            stringify!(dynamic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppAssembly {
    pub image: *mut Il2CppImage,
    pub token: u32,
    pub referencedAssemblyStart: i32,
    pub referencedAssemblyCount: i32,
    pub aname: Il2CppAssemblyName,
}
#[test]
fn bindgen_test_layout_Il2CppAssembly() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAssembly>(),
        96usize,
        concat!("Size of: ", stringify!(Il2CppAssembly))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAssembly>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAssembly))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssembly>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssembly>())).token as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssembly>())).referencedAssemblyStart as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(referencedAssemblyStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAssembly>())).referencedAssemblyCount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(referencedAssemblyCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAssembly>())).aname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAssembly),
            "::",
            stringify!(aname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCodeGenOptions {
    pub enablePrimitiveValueTypeGenericSharing: u8,
}
#[test]
fn bindgen_test_layout_Il2CppCodeGenOptions() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppCodeGenOptions>(),
        1usize,
        concat!("Size of: ", stringify!(Il2CppCodeGenOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCodeGenOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(Il2CppCodeGenOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeGenOptions>())).enablePrimitiveValueTypeGenericSharing
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeGenOptions),
            "::",
            stringify!(enablePrimitiveValueTypeGenericSharing)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppCodeRegistration {
    pub methodPointersCount: u32,
    pub methodPointers: *const Il2CppMethodPointer,
    pub reversePInvokeWrapperCount: u32,
    pub reversePInvokeWrappers: *const Il2CppMethodPointer,
    pub genericMethodPointersCount: u32,
    pub genericMethodPointers: *const Il2CppMethodPointer,
    pub invokerPointersCount: u32,
    pub invokerPointers: *const InvokerMethod,
    pub customAttributeCount: CustomAttributeIndex,
    pub customAttributeGenerators: *const CustomAttributesCacheGenerator,
    pub unresolvedVirtualCallCount: u32,
    pub unresolvedVirtualCallPointers: *const Il2CppMethodPointer,
    pub interopDataCount: u32,
    pub interopData: *mut Il2CppInteropData,
}
#[test]
fn bindgen_test_layout_Il2CppCodeRegistration() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppCodeRegistration>(),
        112usize,
        concat!("Size of: ", stringify!(Il2CppCodeRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCodeRegistration>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCodeRegistration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).methodPointersCount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(methodPointersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).methodPointers as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(methodPointers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).reversePInvokeWrapperCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(reversePInvokeWrapperCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).reversePInvokeWrappers as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(reversePInvokeWrappers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).genericMethodPointersCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(genericMethodPointersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).genericMethodPointers as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(genericMethodPointers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).invokerPointersCount as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(invokerPointersCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).invokerPointers as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(invokerPointers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).customAttributeCount as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(customAttributeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).customAttributeGenerators as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(customAttributeGenerators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).unresolvedVirtualCallCount
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(unresolvedVirtualCallCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).unresolvedVirtualCallPointers
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(unresolvedVirtualCallPointers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).interopDataCount as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(interopDataCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCodeRegistration>())).interopData as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCodeRegistration),
            "::",
            stringify!(interopData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMetadataRegistration {
    pub genericClassesCount: i32,
    pub genericClasses: *const *mut Il2CppGenericClass,
    pub genericInstsCount: i32,
    pub genericInsts: *const *const Il2CppGenericInst,
    pub genericMethodTableCount: i32,
    pub genericMethodTable: *const Il2CppGenericMethodFunctionsDefinitions,
    pub typesCount: i32,
    pub types: *const *const Il2CppType,
    pub methodSpecsCount: i32,
    pub methodSpecs: *const Il2CppMethodSpec,
    pub fieldOffsetsCount: FieldIndex,
    pub fieldOffsets: *mut *const i32,
    pub typeDefinitionsSizesCount: TypeDefinitionIndex,
    pub typeDefinitionsSizes: *mut *const Il2CppTypeDefinitionSizes,
    pub metadataUsagesCount: usize,
    pub metadataUsages: *const *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppMetadataRegistration() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMetadataRegistration>(),
        128usize,
        concat!("Size of: ", stringify!(Il2CppMetadataRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMetadataRegistration>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMetadataRegistration))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).genericClassesCount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericClassesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).genericClasses as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericClasses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).genericInstsCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericInstsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).genericInsts as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericInsts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).genericMethodTableCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericMethodTableCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).genericMethodTable as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(genericMethodTable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).typesCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(typesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).types as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).methodSpecsCount as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(methodSpecsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).methodSpecs as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(methodSpecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).fieldOffsetsCount as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(fieldOffsetsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).fieldOffsets as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(fieldOffsets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).typeDefinitionsSizesCount
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(typeDefinitionsSizesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).typeDefinitionsSizes as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(typeDefinitionsSizes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).metadataUsagesCount as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(metadataUsagesCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMetadataRegistration>())).metadataUsages as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMetadataRegistration),
            "::",
            stringify!(metadataUsages)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppRuntimeStats {
    pub new_object_count: u64,
    pub initialized_class_count: u64,
    pub method_count: u64,
    pub class_static_data_size: u64,
    pub generic_instance_count: u64,
    pub generic_class_count: u64,
    pub inflated_method_count: u64,
    pub inflated_type_count: u64,
    pub enabled: u8,
}
#[test]
fn bindgen_test_layout_Il2CppRuntimeStats() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppRuntimeStats>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppRuntimeStats))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRuntimeStats>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppRuntimeStats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeStats>())).new_object_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(new_object_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeStats>())).initialized_class_count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(initialized_class_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRuntimeStats>())).method_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(method_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeStats>())).class_static_data_size as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(class_static_data_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeStats>())).generic_instance_count as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(generic_instance_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeStats>())).generic_class_count as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(generic_class_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeStats>())).inflated_method_count as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(inflated_method_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRuntimeStats>())).inflated_type_count as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(inflated_type_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRuntimeStats>())).enabled as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRuntimeStats),
            "::",
            stringify!(enabled)
        )
    );
}
extern "C" {
    pub static mut il2cpp_runtime_stats: Il2CppRuntimeStats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppPerfCounters {
    pub jit_methods: u32,
    pub jit_bytes: u32,
    pub jit_time: u32,
    pub jit_failures: u32,
    pub exceptions_thrown: u32,
    pub exceptions_filters: u32,
    pub exceptions_finallys: u32,
    pub exceptions_depth: u32,
    pub aspnet_requests_queued: u32,
    pub aspnet_requests: u32,
    pub gc_collections0: u32,
    pub gc_collections1: u32,
    pub gc_collections2: u32,
    pub gc_promotions0: u32,
    pub gc_promotions1: u32,
    pub gc_promotion_finalizers: u32,
    pub gc_gen0size: u32,
    pub gc_gen1size: u32,
    pub gc_gen2size: u32,
    pub gc_lossize: u32,
    pub gc_fin_survivors: u32,
    pub gc_num_handles: u32,
    pub gc_allocated: u32,
    pub gc_induced: u32,
    pub gc_time: u32,
    pub gc_total_bytes: u32,
    pub gc_committed_bytes: u32,
    pub gc_reserved_bytes: u32,
    pub gc_num_pinned: u32,
    pub gc_sync_blocks: u32,
    pub remoting_calls: u32,
    pub remoting_channels: u32,
    pub remoting_proxies: u32,
    pub remoting_classes: u32,
    pub remoting_objects: u32,
    pub remoting_contexts: u32,
    pub loader_classes: u32,
    pub loader_total_classes: u32,
    pub loader_appdomains: u32,
    pub loader_total_appdomains: u32,
    pub loader_assemblies: u32,
    pub loader_total_assemblies: u32,
    pub loader_failures: u32,
    pub loader_bytes: u32,
    pub loader_appdomains_uloaded: u32,
    pub thread_contentions: u32,
    pub thread_queue_len: u32,
    pub thread_queue_max: u32,
    pub thread_num_logical: u32,
    pub thread_num_physical: u32,
    pub thread_cur_recognized: u32,
    pub thread_num_recognized: u32,
    pub interop_num_ccw: u32,
    pub interop_num_stubs: u32,
    pub interop_num_marshals: u32,
    pub security_num_checks: u32,
    pub security_num_link_checks: u32,
    pub security_time: u32,
    pub security_depth: u32,
    pub unused: u32,
    pub threadpool_workitems: u64,
    pub threadpool_ioworkitems: u64,
    pub threadpool_threads: ::std::os::raw::c_uint,
    pub threadpool_iothreads: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_Il2CppPerfCounters() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppPerfCounters>(),
        264usize,
        concat!("Size of: ", stringify!(Il2CppPerfCounters))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppPerfCounters>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppPerfCounters))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).jit_methods as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).jit_bytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).jit_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).jit_failures as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(jit_failures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).exceptions_thrown as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_thrown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).exceptions_filters as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_filters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).exceptions_finallys as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_finallys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).exceptions_depth as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(exceptions_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).aspnet_requests_queued as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(aspnet_requests_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).aspnet_requests as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(aspnet_requests)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_collections0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_collections0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_collections1 as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_collections1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_collections2 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_collections2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_promotions0 as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_promotions0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_promotions1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_promotions1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_promotion_finalizers as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_promotion_finalizers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_gen0size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_gen0size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_gen1size as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_gen1size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_gen2size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_gen2size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_lossize as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_lossize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_fin_survivors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_fin_survivors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_num_handles as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_num_handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_allocated as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_allocated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_induced as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_induced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_total_bytes as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_total_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_committed_bytes as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_committed_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_reserved_bytes as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_reserved_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_num_pinned as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_num_pinned)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).gc_sync_blocks as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(gc_sync_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).remoting_calls as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_calls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).remoting_channels as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).remoting_proxies as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_proxies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).remoting_classes as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_classes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).remoting_objects as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_objects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).remoting_contexts as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(remoting_contexts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_classes as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_classes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_total_classes as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_total_classes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_appdomains as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_appdomains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_total_appdomains as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_total_appdomains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_assemblies as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_assemblies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_total_assemblies as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_total_assemblies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_failures as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_failures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_bytes as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).loader_appdomains_uloaded as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(loader_appdomains_uloaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).thread_contentions as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_contentions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).thread_queue_len as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_queue_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).thread_queue_max as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_queue_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).thread_num_logical as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_num_logical)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).thread_num_physical as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_num_physical)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).thread_cur_recognized as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_cur_recognized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).thread_num_recognized as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(thread_num_recognized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).interop_num_ccw as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(interop_num_ccw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).interop_num_stubs as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(interop_num_stubs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).interop_num_marshals as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(interop_num_marshals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).security_num_checks as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_num_checks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).security_num_link_checks as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_num_link_checks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).security_time as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).security_depth as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(security_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPerfCounters>())).unused as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).threadpool_workitems as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_workitems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).threadpool_ioworkitems as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_ioworkitems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).threadpool_threads as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPerfCounters>())).threadpool_iothreads as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPerfCounters),
            "::",
            stringify!(threadpool_iothreads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWaitHandle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonitorData {
    _unused: [u8; 0],
}
pub type Il2CppVTable = Il2CppClass;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppObject {
    pub __bindgen_anon_1: Il2CppObject__bindgen_ty_1,
    pub monitor: *mut MonitorData,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppObject__bindgen_ty_1 {
    pub klass: *mut Il2CppClass,
    pub vtable: *mut Il2CppVTable,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Il2CppObject__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppObject__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppObject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppObject__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppObject__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppObject__bindgen_ty_1>())).klass as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppObject__bindgen_ty_1),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppObject__bindgen_ty_1>())).vtable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppObject__bindgen_ty_1),
            "::",
            stringify!(vtable)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppObject() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppObject>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppObject))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppObject>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppObject>())).monitor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppObject),
            "::",
            stringify!(monitor)
        )
    );
}
pub type il2cpp_array_lower_bound_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppArrayBounds {
    pub length: il2cpp_array_size_t,
    pub lower_bound: il2cpp_array_lower_bound_t,
}
#[test]
fn bindgen_test_layout_Il2CppArrayBounds() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppArrayBounds>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppArrayBounds))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArrayBounds>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArrayBounds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayBounds>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayBounds),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArrayBounds>())).lower_bound as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArrayBounds),
            "::",
            stringify!(lower_bound)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppArray {
    pub obj: Il2CppObject,
    pub bounds: *mut Il2CppArrayBounds,
    pub max_length: il2cpp_array_size_t,
}
#[test]
fn bindgen_test_layout_Il2CppArray() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppArray>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppArray))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArray>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArray>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArray),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArray>())).bounds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArray),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArray>())).max_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArray),
            "::",
            stringify!(max_length)
        )
    );
}
#[repr(C)]
pub struct Il2CppArraySize {
    pub obj: Il2CppObject,
    pub bounds: *mut Il2CppArrayBounds,
    pub max_length: il2cpp_array_size_t,
    pub vector: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
}
#[test]
fn bindgen_test_layout_Il2CppArraySize() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppArraySize>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppArraySize))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArraySize>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArraySize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArraySize>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArraySize>())).bounds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArraySize>())).max_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(max_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArraySize>())).vector as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArraySize),
            "::",
            stringify!(vector)
        )
    );
}
pub const kIl2CppSizeOfArray: usize = 32;
pub const kIl2CppOffsetOfArrayBounds: usize = 16;
pub const kIl2CppOffsetOfArrayLength: usize = 24;
#[repr(C)]
pub struct Il2CppString {
    pub object: Il2CppObject,
    #[doc = "< Length of string *excluding* the trailing null (which is included in 'chars')."]
    pub length: i32,
    pub chars: __IncompleteArrayField<Il2CppChar>,
}
#[test]
fn bindgen_test_layout_Il2CppString() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppString>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppString))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppString>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppString>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppString),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppString>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppString),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppString>())).chars as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppString),
            "::",
            stringify!(chars)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionType {
    pub object: Il2CppObject,
    pub type_: *const Il2CppType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionType() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionType>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppReflectionType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionType>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionType),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionType>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionType),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionRuntimeType {
    pub type_: Il2CppReflectionType,
    pub type_info: *mut Il2CppObject,
    pub genericCache: *mut Il2CppObject,
    pub serializationCtor: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionRuntimeType() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionRuntimeType>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppReflectionRuntimeType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionRuntimeType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionRuntimeType))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionRuntimeType>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionRuntimeType>())).type_info as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(type_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionRuntimeType>())).genericCache as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(genericCache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionRuntimeType>())).serializationCtor as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionRuntimeType),
            "::",
            stringify!(serializationCtor)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMonoType {
    pub type_: Il2CppReflectionRuntimeType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMonoType() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMonoType>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMonoType))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMonoType>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMonoType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMonoType>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoType),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionEvent {
    pub object: Il2CppObject,
    pub cached_add_event: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionEvent() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionEvent>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppReflectionEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionEvent>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionEvent),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionEvent>())).cached_add_event as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionEvent),
            "::",
            stringify!(cached_add_event)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMonoEvent {
    pub event: Il2CppReflectionEvent,
    pub reflectedType: *mut Il2CppReflectionType,
    pub eventInfo: *const EventInfo,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMonoEvent() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMonoEvent>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMonoEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMonoEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMonoEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMonoEvent>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEvent),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEvent>())).reflectedType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEvent),
            "::",
            stringify!(reflectedType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEvent>())).eventInfo as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEvent),
            "::",
            stringify!(eventInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppReflectionMonoEventInfo {
    pub declaringType: *mut Il2CppReflectionType,
    pub reflectedType: *mut Il2CppReflectionType,
    pub name: *mut Il2CppString,
    pub addMethod: *mut Il2CppReflectionMethod,
    pub removeMethod: *mut Il2CppReflectionMethod,
    pub raiseMethod: *mut Il2CppReflectionMethod,
    pub eventAttributes: u32,
    pub otherMethods: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMonoEventInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMonoEventInfo>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMonoEventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMonoEventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMonoEventInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).declaringType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).reflectedType as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(reflectedType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).addMethod as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(addMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).removeMethod as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(removeMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).raiseMethod as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(raiseMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).eventAttributes as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(eventAttributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMonoEventInfo>())).otherMethods as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMonoEventInfo),
            "::",
            stringify!(otherMethods)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionField {
    pub object: Il2CppObject,
    pub klass: *mut Il2CppClass,
    pub field: *mut FieldInfo,
    pub name: *mut Il2CppString,
    pub type_: *mut Il2CppReflectionType,
    pub attrs: u32,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionField() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionField>(),
        56usize,
        concat!("Size of: ", stringify!(Il2CppReflectionField))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionField>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionField>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionField>())).klass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionField>())).field as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionField>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionField>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionField>())).attrs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionField),
            "::",
            stringify!(attrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionProperty {
    pub object: Il2CppObject,
    pub klass: *mut Il2CppClass,
    pub property: *const PropertyInfo,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionProperty() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionProperty>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppReflectionProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionProperty))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionProperty>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionProperty),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionProperty>())).klass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionProperty),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionProperty>())).property as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionProperty),
            "::",
            stringify!(property)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMethod {
    pub object: Il2CppObject,
    pub method: *const MethodInfo,
    pub name: *mut Il2CppString,
    pub reftype: *mut Il2CppReflectionType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMethod() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMethod>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMethod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMethod>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMethod>())).method as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMethod>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMethod>())).reftype as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMethod),
            "::",
            stringify!(reftype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionGenericMethod {
    pub base: Il2CppReflectionMethod,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionGenericMethod() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionGenericMethod>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppReflectionGenericMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionGenericMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionGenericMethod))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionGenericMethod>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionGenericMethod),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppMethodInfo {
    pub parent: *mut Il2CppReflectionType,
    pub ret: *mut Il2CppReflectionType,
    pub attrs: u32,
    pub implattrs: u32,
    pub callconv: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodInfo>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppMethodInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMethodInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodInfo>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodInfo>())).ret as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodInfo>())).attrs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodInfo>())).implattrs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(implattrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodInfo>())).callconv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodInfo),
            "::",
            stringify!(callconv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppPropertyInfo {
    pub parent: *mut Il2CppReflectionType,
    pub declaringType: *mut Il2CppReflectionType,
    pub name: *mut Il2CppString,
    pub get: *mut Il2CppReflectionMethod,
    pub set: *mut Il2CppReflectionMethod,
    pub attrs: u32,
}
#[test]
fn bindgen_test_layout_Il2CppPropertyInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppPropertyInfo>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppPropertyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppPropertyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppPropertyInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyInfo>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppPropertyInfo>())).declaringType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(declaringType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyInfo>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyInfo>())).get as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyInfo>())).set as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppPropertyInfo>())).attrs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppPropertyInfo),
            "::",
            stringify!(attrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionParameter {
    pub object: Il2CppObject,
    pub ClassImpl: *mut Il2CppReflectionType,
    pub DefaultValueImpl: *mut Il2CppObject,
    pub MemberImpl: *mut Il2CppObject,
    pub NameImpl: *mut Il2CppString,
    pub PositionImpl: i32,
    pub AttrsImpl: u32,
    pub MarshalAsImpl: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionParameter() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionParameter>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppReflectionParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionParameter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).object as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).ClassImpl as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(ClassImpl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).DefaultValueImpl as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(DefaultValueImpl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).MemberImpl as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(MemberImpl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).NameImpl as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(NameImpl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).PositionImpl as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(PositionImpl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).AttrsImpl as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(AttrsImpl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionParameter>())).MarshalAsImpl as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionParameter),
            "::",
            stringify!(MarshalAsImpl)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionModule {
    pub obj: Il2CppObject,
    pub image: *const Il2CppImage,
    pub assembly: *mut Il2CppReflectionAssembly,
    pub fqname: *mut Il2CppString,
    pub name: *mut Il2CppString,
    pub scopename: *mut Il2CppString,
    pub is_resource: u8,
    pub token: u32,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionModule() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionModule>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppReflectionModule))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionModule>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionModule))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionModule>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionModule>())).image as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionModule>())).assembly as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionModule>())).fqname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(fqname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionModule>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionModule>())).scopename as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(scopename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionModule>())).is_resource as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(is_resource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionModule>())).token as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionModule),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionAssemblyName {
    pub obj: Il2CppObject,
    pub name: *mut Il2CppString,
    pub codebase: *mut Il2CppString,
    pub major: i32,
    pub minor: i32,
    pub build: i32,
    pub revision: i32,
    pub cultureInfo: *mut Il2CppObject,
    pub flags: u32,
    pub hashalg: u32,
    pub keypair: *mut Il2CppObject,
    pub publicKey: *mut Il2CppArray,
    pub keyToken: *mut Il2CppArray,
    pub versioncompat: u32,
    pub version: *mut Il2CppObject,
    pub processor_architecture: u32,
    pub contentType: u32,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionAssemblyName() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionAssemblyName>(),
        112usize,
        concat!("Size of: ", stringify!(Il2CppReflectionAssemblyName))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionAssemblyName>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionAssemblyName))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).obj as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).codebase as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(codebase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).major as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).minor as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).build as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).revision as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).cultureInfo as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(cultureInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).flags as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).hashalg as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(hashalg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).keypair as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(keypair)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).publicKey as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(publicKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).keyToken as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(keyToken)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).versioncompat as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(versioncompat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).version as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).processor_architecture
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(processor_architecture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssemblyName>())).contentType as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssemblyName),
            "::",
            stringify!(contentType)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionAssembly {
    pub object: Il2CppObject,
    pub assembly: *const Il2CppAssembly,
    pub resolve_event_holder: *mut Il2CppObject,
    pub evidence: *mut Il2CppObject,
    pub minimum: *mut Il2CppObject,
    pub optional: *mut Il2CppObject,
    pub refuse: *mut Il2CppObject,
    pub granted: *mut Il2CppObject,
    pub denied: *mut Il2CppObject,
    pub from_byte_array: u8,
    pub name: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionAssembly() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionAssembly>(),
        96usize,
        concat!("Size of: ", stringify!(Il2CppReflectionAssembly))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionAssembly>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionAssembly))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).assembly as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).resolve_event_holder as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(resolve_event_holder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).evidence as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(evidence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).minimum as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).optional as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).refuse as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(refuse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).granted as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(granted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).denied as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(denied)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).from_byte_array as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(from_byte_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionAssembly>())).name as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionAssembly),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionMarshal {
    pub object: Il2CppObject,
    pub count: i32,
    pub type_: i32,
    pub eltype: i32,
    pub guid: *mut Il2CppString,
    pub mcookie: *mut Il2CppString,
    pub marshaltype: *mut Il2CppString,
    pub marshaltyperef: *mut Il2CppObject,
    pub param_num: i32,
    pub has_size: u8,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionMarshal() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionMarshal>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppReflectionMarshal))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionMarshal>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionMarshal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).eltype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(eltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).guid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).mcookie as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(mcookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).marshaltype as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(marshaltype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).marshaltyperef as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(marshaltyperef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).param_num as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(param_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppReflectionMarshal>())).has_size as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionMarshal),
            "::",
            stringify!(has_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppReflectionPointer {
    pub object: Il2CppObject,
    pub data: *mut ::std::os::raw::c_void,
    pub type_: *mut Il2CppReflectionType,
}
#[test]
fn bindgen_test_layout_Il2CppReflectionPointer() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppReflectionPointer>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppReflectionPointer))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppReflectionPointer>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppReflectionPointer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionPointer>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionPointer),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionPointer>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionPointer),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppReflectionPointer>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppReflectionPointer),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppInternalThread {
    pub obj: Il2CppObject,
    pub lock_thread_id: ::std::os::raw::c_int,
    pub handle: *mut ::std::os::raw::c_void,
    pub native_handle: *mut ::std::os::raw::c_void,
    pub cached_culture_info: *mut Il2CppArray,
    pub name: *mut Il2CppChar,
    pub name_len: ::std::os::raw::c_int,
    pub state: u32,
    pub abort_exc: *mut Il2CppObject,
    pub abort_state_handle: ::std::os::raw::c_int,
    pub tid: u64,
    pub debugger_thread: isize,
    pub static_data: *mut *mut ::std::os::raw::c_void,
    pub runtime_thread_info: *mut ::std::os::raw::c_void,
    pub current_appcontext: *mut Il2CppObject,
    pub root_domain_thread: *mut Il2CppObject,
    pub _serialized_principal: *mut Il2CppArray,
    pub _serialized_principal_version: ::std::os::raw::c_int,
    pub appdomain_refs: *mut ::std::os::raw::c_void,
    pub interruption_requested: i32,
    pub synch_cs: *mut ::std::os::raw::c_void,
    pub threadpool_thread: u8,
    pub thread_interrupt_requested: u8,
    pub stack_size: ::std::os::raw::c_int,
    pub apartment_state: u8,
    pub critical_region_level: ::std::os::raw::c_int,
    pub managed_id: ::std::os::raw::c_int,
    pub small_id: u32,
    pub manage_callback: *mut ::std::os::raw::c_void,
    pub interrupt_on_stop: *mut ::std::os::raw::c_void,
    pub flags: isize,
    pub thread_pinning_ref: *mut ::std::os::raw::c_void,
    pub abort_protected_block_count: *mut ::std::os::raw::c_void,
    pub priority: i32,
    pub owned_mutexes: *mut ::std::os::raw::c_void,
    pub suspended: *mut ::std::os::raw::c_void,
    pub self_suspended: i32,
    pub thread_state: usize,
    pub unused2: usize,
    pub last: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppInternalThread() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppInternalThread>(),
        288usize,
        concat!("Size of: ", stringify!(Il2CppInternalThread))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppInternalThread>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppInternalThread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).lock_thread_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(lock_thread_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).native_handle as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(native_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).cached_culture_info as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(cached_culture_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).name_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).state as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).abort_exc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(abort_exc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).abort_state_handle as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(abort_state_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).tid as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).debugger_thread as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(debugger_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).static_data as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(static_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).runtime_thread_info as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(runtime_thread_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).current_appcontext as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(current_appcontext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).root_domain_thread as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(root_domain_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>()))._serialized_principal as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(_serialized_principal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>()))._serialized_principal_version
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(_serialized_principal_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).appdomain_refs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(appdomain_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).interruption_requested as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(interruption_requested)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).synch_cs as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(synch_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).threadpool_thread as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(threadpool_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).thread_interrupt_requested as *const _
                as usize
        },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(thread_interrupt_requested)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).stack_size as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).apartment_state as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(apartment_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).critical_region_level as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(critical_region_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).managed_id as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(managed_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).small_id as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(small_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).manage_callback as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(manage_callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).interrupt_on_stop as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(interrupt_on_stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).flags as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).thread_pinning_ref as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(thread_pinning_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).abort_protected_block_count as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(abort_protected_block_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).priority as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).owned_mutexes as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(owned_mutexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).suspended as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(suspended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).self_suspended as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(self_suspended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppInternalThread>())).thread_state as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(thread_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).unused2 as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppInternalThread>())).last as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppInternalThread),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppIOSelectorJob {
    pub object: Il2CppObject,
    pub operation: i32,
    pub callback: *mut Il2CppObject,
    pub state: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppIOSelectorJob() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppIOSelectorJob>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppIOSelectorJob))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppIOSelectorJob>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppIOSelectorJob))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOSelectorJob>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOSelectorJob>())).operation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOSelectorJob>())).callback as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOSelectorJob>())).state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOSelectorJob),
            "::",
            stringify!(state)
        )
    );
}
pub const Il2CppCallType_Il2Cpp_CallType_Sync: Il2CppCallType = 0;
pub const Il2CppCallType_Il2Cpp_CallType_BeginInvoke: Il2CppCallType = 1;
pub const Il2CppCallType_Il2Cpp_CallType_EndInvoke: Il2CppCallType = 2;
pub const Il2CppCallType_Il2Cpp_CallType_OneWay: Il2CppCallType = 3;
pub type Il2CppCallType = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppMethodMessage {
    pub obj: Il2CppObject,
    pub method: *mut Il2CppReflectionMethod,
    pub args: *mut Il2CppArray,
    pub names: *mut Il2CppArray,
    pub arg_types: *mut Il2CppArray,
    pub ctx: *mut Il2CppObject,
    pub rval: *mut Il2CppObject,
    pub exc: *mut Il2CppObject,
    pub async_result: *mut Il2CppAsyncResult,
    pub call_type: u32,
}
#[test]
fn bindgen_test_layout_Il2CppMethodMessage() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMethodMessage>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppMethodMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMethodMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMethodMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).method as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).names as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).arg_types as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(arg_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).ctx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).rval as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(rval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).exc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(exc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMethodMessage>())).async_result as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(async_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMethodMessage>())).call_type as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMethodMessage),
            "::",
            stringify!(call_type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAppDomainSetup {
    pub object: Il2CppObject,
    pub application_base: *mut Il2CppString,
    pub application_name: *mut Il2CppString,
    pub cache_path: *mut Il2CppString,
    pub configuration_file: *mut Il2CppString,
    pub dynamic_base: *mut Il2CppString,
    pub license_file: *mut Il2CppString,
    pub private_bin_path: *mut Il2CppString,
    pub private_bin_path_probe: *mut Il2CppString,
    pub shadow_copy_directories: *mut Il2CppString,
    pub shadow_copy_files: *mut Il2CppString,
    pub publisher_policy: u8,
    pub path_changed: u8,
    pub loader_optimization: ::std::os::raw::c_int,
    pub disallow_binding_redirects: u8,
    pub disallow_code_downloads: u8,
    pub activation_arguments: *mut Il2CppObject,
    pub domain_initializer: *mut Il2CppObject,
    pub application_trust: *mut Il2CppObject,
    pub domain_initializer_args: *mut Il2CppArray,
    pub disallow_appbase_probe: u8,
    pub configuration_bytes: *mut Il2CppArray,
    pub serialized_non_primitives: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppAppDomainSetup() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAppDomainSetup>(),
        168usize,
        concat!("Size of: ", stringify!(Il2CppAppDomainSetup))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAppDomainSetup>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAppDomainSetup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).application_base as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(application_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).application_name as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(application_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).cache_path as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(cache_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).configuration_file as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(configuration_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).dynamic_base as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(dynamic_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).license_file as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(license_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).private_bin_path as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(private_bin_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).private_bin_path_probe as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(private_bin_path_probe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).shadow_copy_directories as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(shadow_copy_directories)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).shadow_copy_files as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(shadow_copy_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).publisher_policy as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(publisher_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).path_changed as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(path_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).loader_optimization as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(loader_optimization)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).disallow_binding_redirects as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(disallow_binding_redirects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).disallow_code_downloads as *const _
                as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(disallow_code_downloads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).activation_arguments as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(activation_arguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).domain_initializer as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(domain_initializer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).application_trust as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(application_trust)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).domain_initializer_args as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(domain_initializer_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).disallow_appbase_probe as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(disallow_appbase_probe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).configuration_bytes as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(configuration_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAppDomainSetup>())).serialized_non_primitives as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomainSetup),
            "::",
            stringify!(serialized_non_primitives)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppThread {
    pub obj: Il2CppObject,
    pub internal_thread: *mut Il2CppInternalThread,
    pub start_obj: *mut Il2CppObject,
    pub pending_exception: *mut Il2CppException,
    pub principal: *mut Il2CppObject,
    pub principal_version: i32,
    pub delegate: *mut Il2CppDelegate,
    pub executionContext: *mut Il2CppObject,
    pub executionContextBelongsToOuterScope: u8,
}
#[test]
fn bindgen_test_layout_Il2CppThread() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppThread>(),
        80usize,
        concat!("Size of: ", stringify!(Il2CppThread))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppThread>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppThread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).internal_thread as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(internal_thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).start_obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(start_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).pending_exception as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(pending_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).principal as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(principal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).principal_version as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(principal_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).delegate as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(delegate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppThread>())).executionContext as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(executionContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppThread>())).executionContextBelongsToOuterScope as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppThread),
            "::",
            stringify!(executionContextBelongsToOuterScope)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppException {
    pub object: Il2CppObject,
    pub className: *mut Il2CppString,
    pub message: *mut Il2CppString,
    pub _data: *mut Il2CppObject,
    pub inner_ex: *mut Il2CppException,
    pub _helpURL: *mut Il2CppString,
    pub trace_ips: *mut Il2CppArray,
    pub stack_trace: *mut Il2CppString,
    pub remote_stack_trace: *mut Il2CppString,
    pub remote_stack_index: ::std::os::raw::c_int,
    pub _dynamicMethods: *mut Il2CppObject,
    pub hresult: il2cpp_hresult_t,
    pub source: *mut Il2CppString,
    pub safeSerializationManager: *mut Il2CppObject,
    pub captured_traces: *mut Il2CppArray,
    pub native_trace_ips: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppException() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppException>(),
        136usize,
        concat!("Size of: ", stringify!(Il2CppException))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppException>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppException))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).className as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(className)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).message as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>()))._data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).inner_ex as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(inner_ex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>()))._helpURL as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(_helpURL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).trace_ips as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(trace_ips)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).stack_trace as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(stack_trace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppException>())).remote_stack_trace as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(remote_stack_trace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppException>())).remote_stack_index as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(remote_stack_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>()))._dynamicMethods as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(_dynamicMethods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).hresult as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(hresult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).source as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppException>())).safeSerializationManager as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(safeSerializationManager)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppException>())).captured_traces as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(captured_traces)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppException>())).native_trace_ips as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppException),
            "::",
            stringify!(native_trace_ips)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSystemException {
    pub base: Il2CppException,
}
#[test]
fn bindgen_test_layout_Il2CppSystemException() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSystemException>(),
        136usize,
        concat!("Size of: ", stringify!(Il2CppSystemException))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSystemException>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSystemException))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSystemException>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSystemException),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppArgumentException {
    pub base: Il2CppException,
    pub argName: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppArgumentException() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppArgumentException>(),
        144usize,
        concat!("Size of: ", stringify!(Il2CppArgumentException))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppArgumentException>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppArgumentException))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArgumentException>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArgumentException),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppArgumentException>())).argName as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppArgumentException),
            "::",
            stringify!(argName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppTypedRef {
    pub type_: *const Il2CppType,
    pub value: *mut ::std::os::raw::c_void,
    pub klass: *mut Il2CppClass,
}
#[test]
fn bindgen_test_layout_Il2CppTypedRef() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppTypedRef>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppTypedRef))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppTypedRef>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppTypedRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypedRef>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypedRef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypedRef>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypedRef),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppTypedRef>())).klass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppTypedRef),
            "::",
            stringify!(klass)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppDelegate {
    pub object: Il2CppObject,
    pub method_ptr: Il2CppMethodPointer,
    pub invoke_impl: InvokerMethod,
    pub target: *mut Il2CppObject,
    pub method: *const MethodInfo,
    pub delegate_trampoline: *mut ::std::os::raw::c_void,
    pub extraArg: isize,
    pub method_code: *mut *mut u8,
    pub method_info: *mut Il2CppReflectionMethod,
    pub original_method_info: *mut Il2CppReflectionMethod,
    pub data: *mut Il2CppObject,
    pub method_is_virtual: u8,
}
#[test]
fn bindgen_test_layout_Il2CppDelegate() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDelegate>(),
        104usize,
        concat!("Size of: ", stringify!(Il2CppDelegate))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDelegate>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDelegate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).method_ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).invoke_impl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(invoke_impl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).target as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).method as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDelegate>())).delegate_trampoline as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(delegate_trampoline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).extraArg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(extraArg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).method_code as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).method_info as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDelegate>())).original_method_info as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(original_method_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDelegate>())).data as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDelegate>())).method_is_virtual as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDelegate),
            "::",
            stringify!(method_is_virtual)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppMulticastDelegate {
    pub delegate: Il2CppDelegate,
    pub delegates: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppMulticastDelegate() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMulticastDelegate>(),
        112usize,
        concat!("Size of: ", stringify!(Il2CppMulticastDelegate))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMulticastDelegate>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMulticastDelegate))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMulticastDelegate>())).delegate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMulticastDelegate),
            "::",
            stringify!(delegate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMulticastDelegate>())).delegates as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMulticastDelegate),
            "::",
            stringify!(delegates)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppMarshalByRefObject {
    pub obj: Il2CppObject,
    pub identity: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppMarshalByRefObject() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppMarshalByRefObject>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppMarshalByRefObject))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppMarshalByRefObject>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppMarshalByRefObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppMarshalByRefObject>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMarshalByRefObject),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppMarshalByRefObject>())).identity as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppMarshalByRefObject),
            "::",
            stringify!(identity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAppDomain {
    pub mbr: Il2CppMarshalByRefObject,
    pub data: *mut Il2CppDomain,
}
#[test]
fn bindgen_test_layout_Il2CppAppDomain() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAppDomain>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppAppDomain))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAppDomain>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAppDomain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppDomain>())).mbr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomain),
            "::",
            stringify!(mbr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppDomain>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppDomain),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppStackFrame {
    pub obj: Il2CppObject,
    pub il_offset: i32,
    pub native_offset: i32,
    pub methodAddress: u64,
    pub methodIndex: u32,
    pub method: *mut Il2CppReflectionMethod,
    pub filename: *mut Il2CppString,
    pub line: i32,
    pub column: i32,
    pub internal_method_name: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppStackFrame() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppStackFrame>(),
        72usize,
        concat!("Size of: ", stringify!(Il2CppStackFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStackFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStackFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).il_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(il_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).native_offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(native_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).methodAddress as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(methodAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).methodIndex as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(methodIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).method as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).filename as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).line as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStackFrame>())).column as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppStackFrame>())).internal_method_name as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStackFrame),
            "::",
            stringify!(internal_method_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppDateTimeFormatInfo {
    pub obj: Il2CppObject,
    pub CultureData: *mut Il2CppObject,
    pub Name: *mut Il2CppString,
    pub LangName: *mut Il2CppString,
    pub CompareInfo: *mut Il2CppObject,
    pub CultureInfo: *mut Il2CppObject,
    pub AMDesignator: *mut Il2CppString,
    pub PMDesignator: *mut Il2CppString,
    pub DateSeparator: *mut Il2CppString,
    pub GeneralShortTimePattern: *mut Il2CppString,
    pub GeneralLongTimePattern: *mut Il2CppString,
    pub TimeSeparator: *mut Il2CppString,
    pub MonthDayPattern: *mut Il2CppString,
    pub DateTimeOffsetPattern: *mut Il2CppString,
    pub Calendar: *mut Il2CppObject,
    pub FirstDayOfWeek: u32,
    pub CalendarWeekRule: u32,
    pub FullDateTimePattern: *mut Il2CppString,
    pub AbbreviatedDayNames: *mut Il2CppArray,
    pub ShortDayNames: *mut Il2CppArray,
    pub DayNames: *mut Il2CppArray,
    pub AbbreviatedMonthNames: *mut Il2CppArray,
    pub MonthNames: *mut Il2CppArray,
    pub GenitiveMonthNames: *mut Il2CppArray,
    pub GenitiveAbbreviatedMonthNames: *mut Il2CppArray,
    pub LeapYearMonthNames: *mut Il2CppArray,
    pub LongDatePattern: *mut Il2CppString,
    pub ShortDatePattern: *mut Il2CppString,
    pub YearMonthPattern: *mut Il2CppString,
    pub LongTimePattern: *mut Il2CppString,
    pub ShortTimePattern: *mut Il2CppString,
    pub YearMonthPatterns: *mut Il2CppArray,
    pub ShortDatePatterns: *mut Il2CppArray,
    pub LongDatePatterns: *mut Il2CppArray,
    pub ShortTimePatterns: *mut Il2CppArray,
    pub LongTimePatterns: *mut Il2CppArray,
    pub EraNames: *mut Il2CppArray,
    pub AbbrevEraNames: *mut Il2CppArray,
    pub AbbrevEnglishEraNames: *mut Il2CppArray,
    pub OptionalCalendars: *mut Il2CppArray,
    pub readOnly: u8,
    pub FormatFlags: i32,
    pub CultureID: i32,
    pub UseUserOverride: u8,
    pub UseCalendarInfo: u8,
    pub DataItem: i32,
    pub IsDefaultCalendar: u8,
    pub DateWords: *mut Il2CppArray,
    pub FullTimeSpanPositivePattern: *mut Il2CppString,
    pub FullTimeSpanNegativePattern: *mut Il2CppString,
    pub dtfiTokenHash: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppDateTimeFormatInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDateTimeFormatInfo>(),
        376usize,
        concat!("Size of: ", stringify!(Il2CppDateTimeFormatInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDateTimeFormatInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDateTimeFormatInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).CultureData as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CultureData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).Name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).LangName as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LangName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).CompareInfo as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CompareInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).CultureInfo as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CultureInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).AMDesignator as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AMDesignator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).PMDesignator as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(PMDesignator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).DateSeparator as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DateSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).GeneralShortTimePattern as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GeneralShortTimePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).GeneralLongTimePattern as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GeneralLongTimePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).TimeSeparator as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(TimeSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).MonthDayPattern as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(MonthDayPattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).DateTimeOffsetPattern as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DateTimeOffsetPattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).Calendar as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(Calendar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).FirstDayOfWeek as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FirstDayOfWeek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).CalendarWeekRule as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CalendarWeekRule)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).FullDateTimePattern as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FullDateTimePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).AbbreviatedDayNames as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbreviatedDayNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).ShortDayNames as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortDayNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).DayNames as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DayNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).AbbreviatedMonthNames as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbreviatedMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).MonthNames as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(MonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).GenitiveMonthNames as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GenitiveMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).GenitiveAbbreviatedMonthNames
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(GenitiveAbbreviatedMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).LeapYearMonthNames as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LeapYearMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).LongDatePattern as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongDatePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).ShortDatePattern as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortDatePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).YearMonthPattern as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(YearMonthPattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).LongTimePattern as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongTimePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).ShortTimePattern as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortTimePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).YearMonthPatterns as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(YearMonthPatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).ShortDatePatterns as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortDatePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).LongDatePatterns as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongDatePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).ShortTimePatterns as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(ShortTimePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).LongTimePatterns as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(LongTimePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).EraNames as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(EraNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).AbbrevEraNames as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbrevEraNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).AbbrevEnglishEraNames as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(AbbrevEnglishEraNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).OptionalCalendars as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(OptionalCalendars)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).readOnly as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(readOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).FormatFlags as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FormatFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).CultureID as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(CultureID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).UseUserOverride as *const _
                as usize
        },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(UseUserOverride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).UseCalendarInfo as *const _
                as usize
        },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(UseCalendarInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).DataItem as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DataItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).IsDefaultCalendar as *const _
                as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(IsDefaultCalendar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).DateWords as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(DateWords)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).FullTimeSpanPositivePattern
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FullTimeSpanPositivePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).FullTimeSpanNegativePattern
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(FullTimeSpanNegativePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDateTimeFormatInfo>())).dtfiTokenHash as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDateTimeFormatInfo),
            "::",
            stringify!(dtfiTokenHash)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppNumberFormatInfo {
    pub obj: Il2CppObject,
    pub numberGroupSizes: *mut Il2CppArray,
    pub currencyGroupSizes: *mut Il2CppArray,
    pub percentGroupSizes: *mut Il2CppArray,
    pub positiveSign: *mut Il2CppString,
    pub negativeSign: *mut Il2CppString,
    pub numberDecimalSeparator: *mut Il2CppString,
    pub numberGroupSeparator: *mut Il2CppString,
    pub currencyGroupSeparator: *mut Il2CppString,
    pub currencyDecimalSeparator: *mut Il2CppString,
    pub currencySymbol: *mut Il2CppString,
    pub ansiCurrencySymbol: *mut Il2CppString,
    pub naNSymbol: *mut Il2CppString,
    pub positiveInfinitySymbol: *mut Il2CppString,
    pub negativeInfinitySymbol: *mut Il2CppString,
    pub percentDecimalSeparator: *mut Il2CppString,
    pub percentGroupSeparator: *mut Il2CppString,
    pub percentSymbol: *mut Il2CppString,
    pub perMilleSymbol: *mut Il2CppString,
    pub nativeDigits: *mut Il2CppArray,
    pub dataItem: ::std::os::raw::c_int,
    pub numberDecimalDigits: ::std::os::raw::c_int,
    pub currencyDecimalDigits: ::std::os::raw::c_int,
    pub currencyPositivePattern: ::std::os::raw::c_int,
    pub currencyNegativePattern: ::std::os::raw::c_int,
    pub numberNegativePattern: ::std::os::raw::c_int,
    pub percentPositivePattern: ::std::os::raw::c_int,
    pub percentNegativePattern: ::std::os::raw::c_int,
    pub percentDecimalDigits: ::std::os::raw::c_int,
    pub digitSubstitution: ::std::os::raw::c_int,
    pub readOnly: u8,
    pub useUserOverride: u8,
    pub isInvariant: u8,
    pub validForParseAsNumber: u8,
    pub validForParseAsCurrency: u8,
}
#[test]
fn bindgen_test_layout_Il2CppNumberFormatInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppNumberFormatInfo>(),
        216usize,
        concat!("Size of: ", stringify!(Il2CppNumberFormatInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppNumberFormatInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppNumberFormatInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).numberGroupSizes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberGroupSizes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).currencyGroupSizes as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyGroupSizes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).percentGroupSizes as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentGroupSizes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).positiveSign as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(positiveSign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).negativeSign as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(negativeSign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).numberDecimalSeparator as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberDecimalSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).numberGroupSeparator as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberGroupSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).currencyGroupSeparator as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyGroupSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).currencyDecimalSeparator as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyDecimalSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).currencySymbol as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencySymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).ansiCurrencySymbol as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(ansiCurrencySymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).naNSymbol as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(naNSymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).positiveInfinitySymbol as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(positiveInfinitySymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).negativeInfinitySymbol as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(negativeInfinitySymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).percentDecimalSeparator as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentDecimalSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).percentGroupSeparator as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentGroupSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).percentSymbol as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentSymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).perMilleSymbol as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(perMilleSymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).nativeDigits as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(nativeDigits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).dataItem as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(dataItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).numberDecimalDigits as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberDecimalDigits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).currencyDecimalDigits as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyDecimalDigits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).currencyPositivePattern as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyPositivePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).currencyNegativePattern as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(currencyNegativePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).numberNegativePattern as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(numberNegativePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).percentPositivePattern as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentPositivePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).percentNegativePattern as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentNegativePattern)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).percentDecimalDigits as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(percentDecimalDigits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).digitSubstitution as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(digitSubstitution)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).readOnly as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(readOnly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).useUserOverride as *const _ as usize
        },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(useUserOverride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).isInvariant as *const _ as usize
        },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(isInvariant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).validForParseAsNumber as *const _
                as usize
        },
        211usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(validForParseAsNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppNumberFormatInfo>())).validForParseAsCurrency as *const _
                as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppNumberFormatInfo),
            "::",
            stringify!(validForParseAsCurrency)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppCultureData {
    pub obj: Il2CppObject,
    pub AMDesignator: *mut Il2CppString,
    pub PMDesignator: *mut Il2CppString,
    pub TimeSeparator: *mut Il2CppString,
    pub LongTimePatterns: *mut Il2CppArray,
    pub ShortTimePatterns: *mut Il2CppArray,
    pub FirstDayOfWeek: u32,
    pub CalendarWeekRule: u32,
}
#[test]
fn bindgen_test_layout_Il2CppCultureData() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppCultureData>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppCultureData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCultureData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCultureData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureData>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureData>())).AMDesignator as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(AMDesignator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureData>())).PMDesignator as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(PMDesignator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureData>())).TimeSeparator as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(TimeSeparator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureData>())).LongTimePatterns as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(LongTimePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureData>())).ShortTimePatterns as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(ShortTimePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureData>())).FirstDayOfWeek as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(FirstDayOfWeek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureData>())).CalendarWeekRule as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureData),
            "::",
            stringify!(CalendarWeekRule)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppCalendarData {
    pub obj: Il2CppObject,
    pub NativeName: *mut Il2CppString,
    pub ShortDatePatterns: *mut Il2CppArray,
    pub YearMonthPatterns: *mut Il2CppArray,
    pub LongDatePatterns: *mut Il2CppArray,
    pub MonthDayPattern: *mut Il2CppString,
    pub EraNames: *mut Il2CppArray,
    pub AbbreviatedEraNames: *mut Il2CppArray,
    pub AbbreviatedEnglishEraNames: *mut Il2CppArray,
    pub DayNames: *mut Il2CppArray,
    pub AbbreviatedDayNames: *mut Il2CppArray,
    pub SuperShortDayNames: *mut Il2CppArray,
    pub MonthNames: *mut Il2CppArray,
    pub AbbreviatedMonthNames: *mut Il2CppArray,
    pub GenitiveMonthNames: *mut Il2CppArray,
    pub GenitiveAbbreviatedMonthNames: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppCalendarData() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppCalendarData>(),
        136usize,
        concat!("Size of: ", stringify!(Il2CppCalendarData))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCalendarData>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCalendarData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCalendarData>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCalendarData>())).NativeName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(NativeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).ShortDatePatterns as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(ShortDatePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).YearMonthPatterns as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(YearMonthPatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).LongDatePatterns as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(LongDatePatterns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).MonthDayPattern as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(MonthDayPattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCalendarData>())).EraNames as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(EraNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).AbbreviatedEraNames as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedEraNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).AbbreviatedEnglishEraNames as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedEnglishEraNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCalendarData>())).DayNames as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(DayNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).AbbreviatedDayNames as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedDayNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).SuperShortDayNames as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(SuperShortDayNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCalendarData>())).MonthNames as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(MonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).AbbreviatedMonthNames as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(AbbreviatedMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).GenitiveMonthNames as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(GenitiveMonthNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCalendarData>())).GenitiveAbbreviatedMonthNames as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCalendarData),
            "::",
            stringify!(GenitiveAbbreviatedMonthNames)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppCultureInfo {
    pub obj: Il2CppObject,
    pub is_read_only: u8,
    pub lcid: i32,
    pub parent_lcid: i32,
    pub datetime_index: i32,
    pub number_index: i32,
    pub default_calendar_type: i32,
    pub use_user_override: u8,
    pub number_format: *mut Il2CppNumberFormatInfo,
    pub datetime_format: *mut Il2CppDateTimeFormatInfo,
    pub textinfo: *mut Il2CppObject,
    pub name: *mut Il2CppString,
    pub englishname: *mut Il2CppString,
    pub nativename: *mut Il2CppString,
    pub iso3lang: *mut Il2CppString,
    pub iso2lang: *mut Il2CppString,
    pub win3lang: *mut Il2CppString,
    pub territory: *mut Il2CppString,
    pub native_calendar_names: *mut Il2CppArray,
    pub compareinfo: *mut Il2CppString,
    pub text_info_data: *const ::std::os::raw::c_void,
    pub dataItem: ::std::os::raw::c_int,
    pub calendar: *mut Il2CppObject,
    pub parent_culture: *mut Il2CppObject,
    pub constructed: u8,
    pub cached_serialized_form: *mut Il2CppArray,
    pub cultureData: *mut Il2CppObject,
    pub isInherited: u8,
}
#[test]
fn bindgen_test_layout_Il2CppCultureInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppCultureInfo>(),
        208usize,
        concat!("Size of: ", stringify!(Il2CppCultureInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppCultureInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppCultureInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).is_read_only as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).lcid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(lcid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).parent_lcid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(parent_lcid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).datetime_index as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(datetime_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).number_index as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(number_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).default_calendar_type as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(default_calendar_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).use_user_override as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(use_user_override)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).number_format as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(number_format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).datetime_format as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(datetime_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).textinfo as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(textinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).name as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).englishname as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(englishname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).nativename as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(nativename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).iso3lang as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(iso3lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).iso2lang as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(iso2lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).win3lang as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(win3lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).territory as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(territory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).native_calendar_names as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(native_calendar_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).compareinfo as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(compareinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).text_info_data as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(text_info_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).dataItem as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(dataItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).calendar as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(calendar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).parent_culture as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(parent_culture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).constructed as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(constructed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppCultureInfo>())).cached_serialized_form as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(cached_serialized_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).cultureData as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(cultureData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppCultureInfo>())).isInherited as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppCultureInfo),
            "::",
            stringify!(isInherited)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppRegionInfo {
    pub obj: Il2CppObject,
    pub geo_id: i32,
    pub iso2name: *mut Il2CppString,
    pub iso3name: *mut Il2CppString,
    pub win3name: *mut Il2CppString,
    pub english_name: *mut Il2CppString,
    pub native_name: *mut Il2CppString,
    pub currency_symbol: *mut Il2CppString,
    pub iso_currency_symbol: *mut Il2CppString,
    pub currency_english_name: *mut Il2CppString,
    pub currency_native_name: *mut Il2CppString,
}
#[test]
fn bindgen_test_layout_Il2CppRegionInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppRegionInfo>(),
        96usize,
        concat!("Size of: ", stringify!(Il2CppRegionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppRegionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppRegionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRegionInfo>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRegionInfo>())).geo_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(geo_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRegionInfo>())).iso2name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(iso2name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRegionInfo>())).iso3name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(iso3name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRegionInfo>())).win3name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(win3name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRegionInfo>())).english_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(english_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppRegionInfo>())).native_name as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(native_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRegionInfo>())).currency_symbol as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRegionInfo>())).iso_currency_symbol as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(iso_currency_symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRegionInfo>())).currency_english_name as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(currency_english_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppRegionInfo>())).currency_native_name as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppRegionInfo),
            "::",
            stringify!(currency_native_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSafeHandle {
    pub base: Il2CppObject,
    pub handle: *mut ::std::os::raw::c_void,
    pub state: ::std::os::raw::c_int,
    pub owns_handle: u8,
    pub fullyInitialized: u8,
}
#[test]
fn bindgen_test_layout_Il2CppSafeHandle() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSafeHandle>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppSafeHandle))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSafeHandle>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSafeHandle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeHandle>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeHandle>())).handle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeHandle>())).state as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeHandle>())).owns_handle as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(owns_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSafeHandle>())).fullyInitialized as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeHandle),
            "::",
            stringify!(fullyInitialized)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppStringBuilder {
    pub object: Il2CppObject,
    pub chunkChars: *mut Il2CppArray,
    pub chunkPrevious: *mut Il2CppStringBuilder,
    pub chunkLength: ::std::os::raw::c_int,
    pub chunkOffset: ::std::os::raw::c_int,
    pub maxCapacity: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppStringBuilder() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppStringBuilder>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppStringBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStringBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStringBuilder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStringBuilder>())).object as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStringBuilder>())).chunkChars as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkChars)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppStringBuilder>())).chunkPrevious as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkPrevious)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStringBuilder>())).chunkLength as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStringBuilder>())).chunkOffset as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(chunkOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStringBuilder>())).maxCapacity as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStringBuilder),
            "::",
            stringify!(maxCapacity)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSocketAddress {
    pub base: Il2CppObject,
    pub m_Size: ::std::os::raw::c_int,
    pub data: *mut Il2CppArray,
    pub m_changed: u8,
    pub m_hash: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppSocketAddress() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSocketAddress>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppSocketAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSocketAddress>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSocketAddress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAddress>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAddress>())).m_Size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(m_Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAddress>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAddress>())).m_changed as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(m_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAddress>())).m_hash as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAddress),
            "::",
            stringify!(m_hash)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSortKey {
    pub base: Il2CppObject,
    pub str: *mut Il2CppString,
    pub key: *mut Il2CppArray,
    pub options: i32,
    pub lcid: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSortKey() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSortKey>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppSortKey))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSortKey>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSortKey))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSortKey>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSortKey>())).str as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSortKey>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSortKey>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSortKey>())).lcid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSortKey),
            "::",
            stringify!(lcid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppErrorWrapper {
    pub base: Il2CppObject,
    pub errorCode: i32,
}
#[test]
fn bindgen_test_layout_Il2CppErrorWrapper() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppErrorWrapper>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppErrorWrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppErrorWrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppErrorWrapper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppErrorWrapper>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppErrorWrapper),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppErrorWrapper>())).errorCode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppErrorWrapper),
            "::",
            stringify!(errorCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAsyncResult {
    pub base: Il2CppObject,
    pub async_state: *mut Il2CppObject,
    pub handle: *mut Il2CppWaitHandle,
    pub async_delegate: *mut Il2CppDelegate,
    pub data: *mut ::std::os::raw::c_void,
    pub object_data: *mut Il2CppAsyncCall,
    pub sync_completed: u8,
    pub completed: u8,
    pub endinvoke_called: u8,
    pub async_callback: *mut Il2CppObject,
    pub execution_context: *mut Il2CppObject,
    pub original_context: *mut Il2CppObject,
}
#[test]
fn bindgen_test_layout_Il2CppAsyncResult() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAsyncResult>(),
        88usize,
        concat!("Size of: ", stringify!(Il2CppAsyncResult))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAsyncResult>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAsyncResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncResult>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncResult>())).async_state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(async_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncResult>())).handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAsyncResult>())).async_delegate as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(async_delegate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncResult>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncResult>())).object_data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(object_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAsyncResult>())).sync_completed as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(sync_completed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncResult>())).completed as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(completed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAsyncResult>())).endinvoke_called as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(endinvoke_called)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAsyncResult>())).async_callback as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(async_callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAsyncResult>())).execution_context as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(execution_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppAsyncResult>())).original_context as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncResult),
            "::",
            stringify!(original_context)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAsyncCall {
    pub base: Il2CppObject,
    pub msg: *mut Il2CppMethodMessage,
    pub cb_method: *mut MethodInfo,
    pub cb_target: *mut Il2CppDelegate,
    pub state: *mut Il2CppObject,
    pub res: *mut Il2CppObject,
    pub out_args: *mut Il2CppArray,
}
#[test]
fn bindgen_test_layout_Il2CppAsyncCall() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAsyncCall>(),
        64usize,
        concat!("Size of: ", stringify!(Il2CppAsyncCall))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAsyncCall>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAsyncCall))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncCall>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncCall>())).msg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncCall>())).cb_method as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(cb_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncCall>())).cb_target as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(cb_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncCall>())).state as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncCall>())).res as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAsyncCall>())).out_args as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAsyncCall),
            "::",
            stringify!(out_args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppExceptionWrapper {
    pub ex: *mut Il2CppException,
}
#[test]
fn bindgen_test_layout_Il2CppExceptionWrapper() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppExceptionWrapper>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppExceptionWrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppExceptionWrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppExceptionWrapper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppExceptionWrapper>())).ex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppExceptionWrapper),
            "::",
            stringify!(ex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppIOAsyncResult {
    pub base: Il2CppObject,
    pub callback: *mut Il2CppDelegate,
    pub state: *mut Il2CppObject,
    pub wait_handle: *mut Il2CppWaitHandle,
    pub completed_synchronously: u8,
    pub completed: u8,
}
#[test]
fn bindgen_test_layout_Il2CppIOAsyncResult() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppIOAsyncResult>(),
        48usize,
        concat!("Size of: ", stringify!(Il2CppIOAsyncResult))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppIOAsyncResult>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppIOAsyncResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOAsyncResult>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOAsyncResult>())).callback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOAsyncResult>())).state as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOAsyncResult>())).wait_handle as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(wait_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppIOAsyncResult>())).completed_synchronously as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(completed_synchronously)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppIOAsyncResult>())).completed as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppIOAsyncResult),
            "::",
            stringify!(completed)
        )
    );
}
#[doc = " Corresponds to Mono's internal System.Net.Sockets.Socket.SocketAsyncResult"]
#[doc = " class. Has no relation to Il2CppAsyncResult."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppSocketAsyncResult {
    pub base: Il2CppIOAsyncResult,
    pub socket: *mut Il2CppObject,
    pub operation: i32,
    pub delayedException: *mut Il2CppException,
    pub endPoint: *mut Il2CppObject,
    pub buffer: *mut Il2CppArray,
    pub offset: i32,
    pub size: i32,
    pub socket_flags: i32,
    pub acceptSocket: *mut Il2CppObject,
    pub addresses: *mut Il2CppArray,
    pub port: i32,
    pub buffers: *mut Il2CppObject,
    pub reuseSocket: u8,
    pub currentAddress: i32,
    pub acceptedSocket: *mut Il2CppObject,
    pub total: i32,
    pub error: i32,
    pub endCalled: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSocketAsyncResult() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSocketAsyncResult>(),
        168usize,
        concat!("Size of: ", stringify!(Il2CppSocketAsyncResult))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSocketAsyncResult>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSocketAsyncResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).socket as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(socket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).operation as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).delayedException as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(delayedException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).endPoint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(endPoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).buffer as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).offset as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).size as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).socket_flags as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(socket_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).acceptSocket as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(acceptSocket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).addresses as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(addresses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).port as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).buffers as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).reuseSocket as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(reuseSocket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).currentAddress as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(currentAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).acceptedSocket as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(acceptedSocket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).total as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).error as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSocketAsyncResult>())).endCalled as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSocketAsyncResult),
            "::",
            stringify!(endCalled)
        )
    );
}
pub const Il2CppResourceLocation_IL2CPP_RESOURCE_LOCATION_EMBEDDED: Il2CppResourceLocation = 1;
pub const Il2CppResourceLocation_IL2CPP_RESOURCE_LOCATION_ANOTHER_ASSEMBLY: Il2CppResourceLocation =
    2;
pub const Il2CppResourceLocation_IL2CPP_RESOURCE_LOCATION_IN_MANIFEST: Il2CppResourceLocation = 4;
pub type Il2CppResourceLocation = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppManifestResourceInfo {
    pub object: Il2CppObject,
    pub assembly: *mut Il2CppReflectionAssembly,
    pub filename: *mut Il2CppString,
    pub location: u32,
}
#[test]
fn bindgen_test_layout_Il2CppManifestResourceInfo() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppManifestResourceInfo>(),
        40usize,
        concat!("Size of: ", stringify!(Il2CppManifestResourceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppManifestResourceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppManifestResourceInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppManifestResourceInfo>())).object as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppManifestResourceInfo>())).assembly as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppManifestResourceInfo>())).filename as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppManifestResourceInfo>())).location as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppManifestResourceInfo),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppAppContext {
    pub obj: Il2CppObject,
    pub domain_id: i32,
    pub context_id: i32,
    pub static_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppAppContext() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppAppContext>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppAppContext))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppAppContext>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppAppContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppContext>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppContext>())).domain_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(domain_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppContext>())).context_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(context_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppAppContext>())).static_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppAppContext),
            "::",
            stringify!(static_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppDecimal {
    pub reserved: u16,
    pub u: Il2CppDecimal__bindgen_ty_1,
    pub Hi32: u32,
    pub v: Il2CppDecimal__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppDecimal__bindgen_ty_1 {
    pub u: Il2CppDecimal__bindgen_ty_1__bindgen_ty_1,
    pub signscale: u16,
    _bindgen_union_align: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDecimal__bindgen_ty_1__bindgen_ty_1 {
    pub scale: u8,
    pub sign: u8,
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_1__bindgen_ty_1>())).scale as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_1__bindgen_ty_1>())).sign as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sign)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(Il2CppDecimal__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(Il2CppDecimal__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_1>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_1>())).signscale as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_1),
            "::",
            stringify!(signscale)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppDecimal__bindgen_ty_2 {
    pub v: Il2CppDecimal__bindgen_ty_2__bindgen_ty_1,
    pub Lo64: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDecimal__bindgen_ty_2__bindgen_ty_1 {
    pub Lo32: u32,
    pub Mid32: u32,
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_2__bindgen_ty_1>())).Lo32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(Lo32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_2__bindgen_ty_1>())).Mid32 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(Mid32)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppDecimal__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppDecimal__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDecimal__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_2>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppDecimal__bindgen_ty_2>())).Lo64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal__bindgen_ty_2),
            "::",
            stringify!(Lo64)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppDecimal() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDecimal>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppDecimal))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDecimal>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDecimal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDecimal>())).reserved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDecimal>())).u as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDecimal>())).Hi32 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(Hi32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDecimal>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDecimal),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppDouble {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize], u32>,
}
#[test]
fn bindgen_test_layout_Il2CppDouble() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDouble>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppDouble))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDouble>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppDouble))
    );
}
impl Il2CppDouble {
    #[inline]
    pub fn mantLo(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_mantLo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn mantHi(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_mantHi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn exp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(52usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_exp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(52usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn sign(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mantLo: u32,
        mantHi: u32,
        exp: u32,
        sign: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let mantLo: u32 = unsafe { ::std::mem::transmute(mantLo) };
            mantLo as u64
        });
        __bindgen_bitfield_unit.set(32usize, 20u8, {
            let mantHi: u32 = unsafe { ::std::mem::transmute(mantHi) };
            mantHi as u64
        });
        __bindgen_bitfield_unit.set(52usize, 11u8, {
            let exp: u32 = unsafe { ::std::mem::transmute(exp) };
            exp as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let sign: u32 = unsafe { ::std::mem::transmute(sign) };
            sign as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppDouble_double {
    pub s: Il2CppDouble,
    pub d: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Il2CppDouble_double() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppDouble_double>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppDouble_double))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppDouble_double>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppDouble_double))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDouble_double>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDouble_double),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppDouble_double>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppDouble_double),
            "::",
            stringify!(d)
        )
    );
}
pub const Il2CppDecimalCompareResult_IL2CPP_DECIMAL_CMP_LT: Il2CppDecimalCompareResult = -1;
pub const Il2CppDecimalCompareResult_IL2CPP_DECIMAL_CMP_EQ: Il2CppDecimalCompareResult = 0;
pub const Il2CppDecimalCompareResult_IL2CPP_DECIMAL_CMP_GT: Il2CppDecimalCompareResult = 1;
pub type Il2CppDecimalCompareResult = i32;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSingle {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
#[test]
fn bindgen_test_layout_Il2CppSingle() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSingle>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppSingle))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSingle>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSingle))
    );
}
impl Il2CppSingle {
    #[inline]
    pub fn mant(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_mant(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn exp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_exp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sign(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mant: u32,
        exp: u32,
        sign: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 23u8, {
            let mant: u32 = unsafe { ::std::mem::transmute(mant) };
            mant as u64
        });
        __bindgen_bitfield_unit.set(23usize, 8u8, {
            let exp: u32 = unsafe { ::std::mem::transmute(exp) };
            exp as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let sign: u32 = unsafe { ::std::mem::transmute(sign) };
            sign as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppSingle_float {
    pub s: Il2CppSingle,
    pub f: f32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_Il2CppSingle_float() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSingle_float>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppSingle_float))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSingle_float>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSingle_float))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSingle_float>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSingle_float),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSingle_float>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSingle_float),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppGuid {
    pub data1: u32,
    pub data2: u16,
    pub data3: u16,
    pub data4: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_Il2CppGuid() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppGuid>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppGuid))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppGuid>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppGuid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGuid>())).data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGuid>())).data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGuid>())).data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppGuid>())).data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppGuid),
            "::",
            stringify!(data4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSafeArrayBound {
    pub element_count: u32,
    pub lower_bound: i32,
}
#[test]
fn bindgen_test_layout_Il2CppSafeArrayBound() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSafeArrayBound>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppSafeArrayBound))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSafeArrayBound>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppSafeArrayBound))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSafeArrayBound>())).element_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArrayBound),
            "::",
            stringify!(element_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppSafeArrayBound>())).lower_bound as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArrayBound),
            "::",
            stringify!(lower_bound)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppSafeArray {
    pub dimension_count: u16,
    pub features: u16,
    pub element_size: u32,
    pub lock_count: u32,
    pub data: *mut ::std::os::raw::c_void,
    pub bounds: [Il2CppSafeArrayBound; 1usize],
}
#[test]
fn bindgen_test_layout_Il2CppSafeArray() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppSafeArray>(),
        32usize,
        concat!("Size of: ", stringify!(Il2CppSafeArray))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppSafeArray>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppSafeArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeArray>())).dimension_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(dimension_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeArray>())).features as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeArray>())).element_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeArray>())).lock_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(lock_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeArray>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppSafeArray>())).bounds as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppSafeArray),
            "::",
            stringify!(bounds)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppWin32Decimal {
    pub reserved: u16,
    pub u: Il2CppWin32Decimal__bindgen_ty_1,
    pub hi32: u32,
    pub u2: Il2CppWin32Decimal__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppWin32Decimal__bindgen_ty_1 {
    pub s: Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1,
    pub signscale: u16,
    _bindgen_union_align: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1 {
    pub scale: u8,
    pub sign: u8,
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1>())).scale
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1>())).sign
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sign)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(Il2CppWin32Decimal__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_1>())).s as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_1>())).signscale as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_1),
            "::",
            stringify!(signscale)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppWin32Decimal__bindgen_ty_2 {
    pub s2: Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1,
    pub lo64: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1 {
    pub lo32: u32,
    pub mid32: u32,
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1>())).lo32
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(lo32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1>())).mid32
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(mid32)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppWin32Decimal__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_2>())).s2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWin32Decimal__bindgen_ty_2>())).lo64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal__bindgen_ty_2),
            "::",
            stringify!(lo64)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppWin32Decimal() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppWin32Decimal>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppWin32Decimal))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWin32Decimal>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppWin32Decimal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppWin32Decimal>())).reserved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppWin32Decimal>())).u as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppWin32Decimal>())).hi32 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(hi32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppWin32Decimal>())).u2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWin32Decimal),
            "::",
            stringify!(u2)
        )
    );
}
pub type IL2CPP_VARIANT_BOOL = i16;
pub const Il2CppVarType_IL2CPP_VT_EMPTY: Il2CppVarType = 0;
pub const Il2CppVarType_IL2CPP_VT_NULL: Il2CppVarType = 1;
pub const Il2CppVarType_IL2CPP_VT_I2: Il2CppVarType = 2;
pub const Il2CppVarType_IL2CPP_VT_I4: Il2CppVarType = 3;
pub const Il2CppVarType_IL2CPP_VT_R4: Il2CppVarType = 4;
pub const Il2CppVarType_IL2CPP_VT_R8: Il2CppVarType = 5;
pub const Il2CppVarType_IL2CPP_VT_CY: Il2CppVarType = 6;
pub const Il2CppVarType_IL2CPP_VT_DATE: Il2CppVarType = 7;
pub const Il2CppVarType_IL2CPP_VT_BSTR: Il2CppVarType = 8;
pub const Il2CppVarType_IL2CPP_VT_DISPATCH: Il2CppVarType = 9;
pub const Il2CppVarType_IL2CPP_VT_ERROR: Il2CppVarType = 10;
pub const Il2CppVarType_IL2CPP_VT_BOOL: Il2CppVarType = 11;
pub const Il2CppVarType_IL2CPP_VT_VARIANT: Il2CppVarType = 12;
pub const Il2CppVarType_IL2CPP_VT_UNKNOWN: Il2CppVarType = 13;
pub const Il2CppVarType_IL2CPP_VT_DECIMAL: Il2CppVarType = 14;
pub const Il2CppVarType_IL2CPP_VT_I1: Il2CppVarType = 16;
pub const Il2CppVarType_IL2CPP_VT_UI1: Il2CppVarType = 17;
pub const Il2CppVarType_IL2CPP_VT_UI2: Il2CppVarType = 18;
pub const Il2CppVarType_IL2CPP_VT_UI4: Il2CppVarType = 19;
pub const Il2CppVarType_IL2CPP_VT_I8: Il2CppVarType = 20;
pub const Il2CppVarType_IL2CPP_VT_UI8: Il2CppVarType = 21;
pub const Il2CppVarType_IL2CPP_VT_INT: Il2CppVarType = 22;
pub const Il2CppVarType_IL2CPP_VT_UINT: Il2CppVarType = 23;
pub const Il2CppVarType_IL2CPP_VT_VOID: Il2CppVarType = 24;
pub const Il2CppVarType_IL2CPP_VT_HRESULT: Il2CppVarType = 25;
pub const Il2CppVarType_IL2CPP_VT_PTR: Il2CppVarType = 26;
pub const Il2CppVarType_IL2CPP_VT_SAFEARRAY: Il2CppVarType = 27;
pub const Il2CppVarType_IL2CPP_VT_CARRAY: Il2CppVarType = 28;
pub const Il2CppVarType_IL2CPP_VT_USERDEFINED: Il2CppVarType = 29;
pub const Il2CppVarType_IL2CPP_VT_LPSTR: Il2CppVarType = 30;
pub const Il2CppVarType_IL2CPP_VT_LPWSTR: Il2CppVarType = 31;
pub const Il2CppVarType_IL2CPP_VT_RECORD: Il2CppVarType = 36;
pub const Il2CppVarType_IL2CPP_VT_INT_PTR: Il2CppVarType = 37;
pub const Il2CppVarType_IL2CPP_VT_UINT_PTR: Il2CppVarType = 38;
pub const Il2CppVarType_IL2CPP_VT_FILETIME: Il2CppVarType = 64;
pub const Il2CppVarType_IL2CPP_VT_BLOB: Il2CppVarType = 65;
pub const Il2CppVarType_IL2CPP_VT_STREAM: Il2CppVarType = 66;
pub const Il2CppVarType_IL2CPP_VT_STORAGE: Il2CppVarType = 67;
pub const Il2CppVarType_IL2CPP_VT_STREAMED_OBJECT: Il2CppVarType = 68;
pub const Il2CppVarType_IL2CPP_VT_STORED_OBJECT: Il2CppVarType = 69;
pub const Il2CppVarType_IL2CPP_VT_BLOB_OBJECT: Il2CppVarType = 70;
pub const Il2CppVarType_IL2CPP_VT_CF: Il2CppVarType = 71;
pub const Il2CppVarType_IL2CPP_VT_CLSID: Il2CppVarType = 72;
pub const Il2CppVarType_IL2CPP_VT_VERSIONED_STREAM: Il2CppVarType = 73;
pub const Il2CppVarType_IL2CPP_VT_BSTR_BLOB: Il2CppVarType = 4095;
pub const Il2CppVarType_IL2CPP_VT_VECTOR: Il2CppVarType = 4096;
pub const Il2CppVarType_IL2CPP_VT_ARRAY: Il2CppVarType = 8192;
pub const Il2CppVarType_IL2CPP_VT_BYREF: Il2CppVarType = 16384;
pub const Il2CppVarType_IL2CPP_VT_RESERVED: Il2CppVarType = 32768;
pub const Il2CppVarType_IL2CPP_VT_ILLEGAL: Il2CppVarType = 65535;
pub const Il2CppVarType_IL2CPP_VT_ILLEGALMASKED: Il2CppVarType = 4095;
pub const Il2CppVarType_IL2CPP_VT_TYPEMASK: Il2CppVarType = 4095;
pub type Il2CppVarType = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppVariant {
    pub n1: Il2CppVariant__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppVariant__bindgen_ty_1 {
    pub n2: Il2CppVariant__bindgen_ty_1___tagVARIANT,
    pub decVal: Il2CppWin32Decimal,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppVariant__bindgen_ty_1___tagVARIANT {
    pub type_: u16,
    pub reserved1: u16,
    pub reserved2: u16,
    pub reserved3: u16,
    pub n3: Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1 {
    pub llVal: i64,
    pub lVal: i32,
    pub bVal: u8,
    pub iVal: i16,
    pub fltVal: f32,
    pub dblVal: f64,
    pub boolVal: IL2CPP_VARIANT_BOOL,
    pub scode: i32,
    pub cyVal: i64,
    pub date: f64,
    pub bstrVal: *mut Il2CppChar,
    pub punkVal: *mut Il2CppIUnknown,
    pub pdispVal: *mut ::std::os::raw::c_void,
    pub parray: *mut Il2CppSafeArray,
    pub pbVal: *mut u8,
    pub piVal: *mut i16,
    pub plVal: *mut i32,
    pub pllVal: *mut i64,
    pub pfltVal: *mut f32,
    pub pdblVal: *mut f64,
    pub pboolVal: *mut IL2CPP_VARIANT_BOOL,
    pub pscode: *mut i32,
    pub pcyVal: *mut i64,
    pub pdate: *mut f64,
    pub pbstrVal: *mut Il2CppChar,
    pub ppunkVal: *mut *mut Il2CppIUnknown,
    pub ppdispVal: *mut *mut ::std::os::raw::c_void,
    pub pparray: *mut *mut Il2CppSafeArray,
    pub pvarVal: *mut Il2CppVariant,
    pub byref: *mut ::std::os::raw::c_void,
    pub cVal: ::std::os::raw::c_char,
    pub uiVal: u16,
    pub ulVal: u32,
    pub ullVal: u64,
    pub intVal: ::std::os::raw::c_int,
    pub uintVal: ::std::os::raw::c_uint,
    pub pdecVal: *mut Il2CppWin32Decimal,
    pub pcVal: *mut ::std::os::raw::c_char,
    pub puiVal: *mut u16,
    pub pulVal: *mut u32,
    pub pullVal: *mut u64,
    pub pintVal: *mut ::std::os::raw::c_int,
    pub puintVal: *mut ::std::os::raw::c_uint,
    pub n4: Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD {
    pub pvRecord: *mut ::std::os::raw::c_void,
    pub pRecInfo: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD>(
        ),
        16usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD,
            >()))
            .pvRecord as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD),
            "::",
            stringify!(pvRecord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD,
            >()))
            .pRecInfo as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1___tagBRECORD),
            "::",
            stringify!(pRecInfo)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).llVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(llVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).lVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(lVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).bVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(bVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).iVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(iVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .fltVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(fltVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .dblVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(dblVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .boolVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(boolVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).scode
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(scode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).cyVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(cyVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).date
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .bstrVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(bstrVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .punkVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(punkVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pdispVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdispVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .parray as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(parray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).pbVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pbVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).piVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(piVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).plVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(plVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pllVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pllVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pfltVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pfltVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pdblVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdblVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pboolVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pboolVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pscode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pscode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pcyVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pcyVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).pdate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pbstrVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pbstrVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .ppunkVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ppunkVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .ppdispVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ppdispVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pparray as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pparray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pvarVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pvarVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).byref
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(byref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).cVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(cVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).uiVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(uiVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).ulVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ulVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .ullVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(ullVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .intVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(intVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .uintVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(uintVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pdecVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pdecVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).pcVal
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pcVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .puiVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(puiVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pulVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pulVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pullVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pullVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .pintVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(pintVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>()))
                .puintVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(puintVal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1>())).n4
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT__bindgen_ty_1),
            "::",
            stringify!(n4)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1___tagVARIANT() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1___tagVARIANT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT>())).reserved2
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT>())).reserved3
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1___tagVARIANT>())).n3 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1___tagVARIANT),
            "::",
            stringify!(n3)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppVariant__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppVariant__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1>())).n2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1),
            "::",
            stringify!(n2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppVariant__bindgen_ty_1>())).decVal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant__bindgen_ty_1),
            "::",
            stringify!(decVal)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppVariant() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppVariant>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppVariant))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppVariant>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppVariant))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppVariant>())).n1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppVariant),
            "::",
            stringify!(n1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppFileTime {
    pub low: u32,
    pub high: u32,
}
#[test]
fn bindgen_test_layout_Il2CppFileTime() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppFileTime>(),
        8usize,
        concat!("Size of: ", stringify!(Il2CppFileTime))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppFileTime>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppFileTime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFileTime>())).low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFileTime),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppFileTime>())).high as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppFileTime),
            "::",
            stringify!(high)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppStatStg {
    pub name: *mut Il2CppChar,
    pub type_: u32,
    pub size: u64,
    pub mtime: Il2CppFileTime,
    pub ctime: Il2CppFileTime,
    pub atime: Il2CppFileTime,
    pub mode: u32,
    pub locks: u32,
    pub clsid: Il2CppGuid,
    pub state: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_Il2CppStatStg() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppStatStg>(),
        80usize,
        concat!("Size of: ", stringify!(Il2CppStatStg))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppStatStg>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppStatStg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).mtime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).ctime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).atime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).mode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).locks as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(locks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).clsid as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(clsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).state as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppStatStg>())).reserved as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppStatStg),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppHString__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Il2CppHString__() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppHString__>(),
        4usize,
        concat!("Size of: ", stringify!(Il2CppHString__))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppHString__>(),
        4usize,
        concat!("Alignment of ", stringify!(Il2CppHString__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppHString__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHString__),
            "::",
            stringify!(unused)
        )
    );
}
pub type Il2CppHString = *mut Il2CppHString__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Il2CppHStringHeader {
    pub Reserved: Il2CppHStringHeader__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Il2CppHStringHeader__bindgen_ty_1 {
    pub Reserved1: *mut ::std::os::raw::c_void,
    pub Reserved2: [::std::os::raw::c_char; 24usize],
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_Il2CppHStringHeader__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppHStringHeader__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppHStringHeader__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppHStringHeader__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Il2CppHStringHeader__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppHStringHeader__bindgen_ty_1>())).Reserved1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHStringHeader__bindgen_ty_1),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppHStringHeader__bindgen_ty_1>())).Reserved2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHStringHeader__bindgen_ty_1),
            "::",
            stringify!(Reserved2)
        )
    );
}
#[test]
fn bindgen_test_layout_Il2CppHStringHeader() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppHStringHeader>(),
        24usize,
        concat!("Size of: ", stringify!(Il2CppHStringHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppHStringHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppHStringHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Il2CppHStringHeader>())).Reserved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppHStringHeader),
            "::",
            stringify!(Reserved)
        )
    );
}
pub const Il2CppWindowsRuntimeTypeKind_kTypeKindPrimitive: Il2CppWindowsRuntimeTypeKind = 0;
pub const Il2CppWindowsRuntimeTypeKind_kTypeKindMetadata: Il2CppWindowsRuntimeTypeKind = 1;
pub const Il2CppWindowsRuntimeTypeKind_kTypeKindCustom: Il2CppWindowsRuntimeTypeKind = 2;
pub type Il2CppWindowsRuntimeTypeKind = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Il2CppWindowsRuntimeTypeName {
    pub typeName: Il2CppHString,
    pub typeKind: Il2CppWindowsRuntimeTypeKind,
}
#[test]
fn bindgen_test_layout_Il2CppWindowsRuntimeTypeName() {
    assert_eq!(
        ::std::mem::size_of::<Il2CppWindowsRuntimeTypeName>(),
        16usize,
        concat!("Size of: ", stringify!(Il2CppWindowsRuntimeTypeName))
    );
    assert_eq!(
        ::std::mem::align_of::<Il2CppWindowsRuntimeTypeName>(),
        8usize,
        concat!("Alignment of ", stringify!(Il2CppWindowsRuntimeTypeName))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWindowsRuntimeTypeName>())).typeName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeName),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Il2CppWindowsRuntimeTypeName>())).typeKind as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Il2CppWindowsRuntimeTypeName),
            "::",
            stringify!(typeKind)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
